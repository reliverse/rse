import type { Template } from "~/providers/better-t-stack/better-t-stack-types.ts";

export const DLER_TPL_AUTH: Template = {
  name: "auth",
  description: "Template generated from 58 files",
  updatedAt: "2025-06-17T20:33:59.599Z",
  config: {
    files: {
      "auth/native/native-base/lib/auth-client.ts.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "0200f4eedc",
        },
        content: `import { createAuthClient } from "better-auth/react";\nimport { expoClient } from "@better-auth/expo/client";\nimport * as SecureStore from "expo-secure-store";\n\nexport const authClient = createAuthClient({\n  baseURL: process.env.EXPO_PUBLIC_SERVER_URL,\n  plugins: [\n    expoClient({\n      storagePrefix: "my-better-t-app",\n      storage: SecureStore,\n    }),\n  ],\n});\n`,
        type: "text",
      },
      "auth/native/nativewind/app/(drawer)/index.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "c97ce0cd75",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useQuery } from "@tanstack/react-query";\nimport { ScrollView, Text, TouchableOpacity, View } from "react-native";\n\nimport { Container } from "@/components/container";\nimport { SignIn } from "@/components/sign-in";\nimport { SignUp } from "@/components/sign-up";\n{{#if (eq api "orpc")}}\nimport { queryClient, orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { queryClient, trpc } from "@/utils/trpc";\n{{/if}}\n\nexport default function Home() {\n	{{#if (eq api "orpc")}}\n	const healthCheck = useQuery(orpc.healthCheck.queryOptions());\n	const privateData = useQuery(orpc.privateData.queryOptions());\n	{{/if}}\n	{{#if (eq api "trpc")}}\n	const healthCheck = useQuery(trpc.healthCheck.queryOptions());\n	const privateData = useQuery(trpc.privateData.queryOptions());\n	{{/if}}\n	const { data: session } = authClient.useSession();\n\n	return (\n		<Container>\n			<ScrollView className="flex-1">\n				<View className="px-4">\n					<Text className="font-mono text-foreground text-3xl font-bold mb-4">\n						BETTER T STACK\n					</Text>\n					{session?.user ? (\n						<View className="mb-6 p-4 bg-card rounded-lg border border-border">\n							<View className="flex-row justify-between items-center mb-2">\n								<Text className="text-foreground text-base">\n									Welcome,{" "}\n									<Text className="font-medium">{session.user.name}</Text>\n								</Text>\n							</View>\n							<Text className="text-muted-foreground text-sm mb-4">\n								{session.user.email}\n							</Text>\n\n							<TouchableOpacity\n								className="bg-destructive py-2 px-4 rounded-md self-start"\n								onPress={() => {\n									authClient.signOut();\n									queryClient.invalidateQueries();\n								}}\n							>\n								<Text className="text-white font-medium">Sign Out</Text>\n							</TouchableOpacity>\n						</View>\n					) : null}\n					<View className="mb-6 rounded-lg border border-border p-4">\n						<Text className="mb-3 font-medium text-foreground">API Status</Text>\n						<View className="flex-row items-center gap-2">\n							<View\n								className={\`h-3 w-3 rounded-full \${\n									healthCheck.data ? "bg-green-500" : "bg-red-500"\n								}\`}\n							/>\n							<Text className="text-muted-foreground">\n								{healthCheck.isLoading\n									? "Checking..."\n									: healthCheck.data\n										? "Connected to API"\n										: "API Disconnected"}\n							</Text>\n						</View>\n					</View>\n					<View className="mb-6 rounded-lg border border-border p-4">\n						<Text className="mb-3 font-medium text-foreground">\n							Private Data\n						</Text>\n						{privateData && (\n							<View>\n								<Text className="text-muted-foreground">\n									{privateData.data?.message}\n								</Text>\n							</View>\n						)}\n					</View>\n					{!session?.user && (\n						<>\n							<SignIn />\n							<SignUp />\n						</>\n					)}\n				</View>\n			</ScrollView>\n		</Container>\n	);\n}\n`,
        type: "text",
      },
      "auth/native/nativewind/components/sign-in.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "4c4e7aa2b5",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "trpc")}}\nimport { queryClient } from "@/utils/trpc";\n{{/if}}\n{{#if (eq api "orpc")}}\nimport { queryClient } from "@/utils/orpc";\n{{/if}}\nimport { useState } from "react";\nimport {\n	ActivityIndicator,\n	Text,\n	TextInput,\n	TouchableOpacity,\n	View,\n} from "react-native";\n\nexport function SignIn() {\n	const [email, setEmail] = useState("");\n	const [password, setPassword] = useState("");\n	const [isLoading, setIsLoading] = useState(false);\n	const [error, setError] = useState<string | null>(null);\n\n	const handleLogin = async () => {\n		setIsLoading(true);\n		setError(null);\n\n		await authClient.signIn.email(\n			{\n				email,\n				password,\n			},\n			{\n				onError: (error) => {\n					setError(error.error?.message || "Failed to sign in");\n					setIsLoading(false);\n				},\n				onSuccess: () => {\n					setEmail("");\n					setPassword("");\n					queryClient.refetchQueries();\n				},\n				onFinished: () => {\n					setIsLoading(false);\n				},\n			},\n		);\n	};\n\n	return (\n		<View className="mt-6 p-4 bg-card rounded-lg border border-border">\n			<Text className="text-lg font-semibold text-foreground mb-4">\n				Sign In\n			</Text>\n\n			{error && (\n				<View className="mb-4 p-3 bg-destructive/10 rounded-md">\n					<Text className="text-destructive text-sm">{error}</Text>\n				</View>\n			)}\n\n			<TextInput\n				className="mb-3 p-4 rounded-md bg-input text-foreground border border-input"\n				placeholder="Email"\n				value={email}\n				onChangeText={setEmail}\n				placeholderTextColor="#9CA3AF"\n				keyboardType="email-address"\n				autoCapitalize="none"\n			/>\n\n			<TextInput\n				className="mb-4 p-4 rounded-md bg-input text-foreground border border-input"\n				placeholder="Password"\n				value={password}\n				onChangeText={setPassword}\n				placeholderTextColor="#9CA3AF"\n				secureTextEntry\n			/>\n\n			<TouchableOpacity\n				onPress={handleLogin}\n				disabled={isLoading}\n				className="bg-primary p-4 rounded-md flex-row justify-center items-center"\n			>\n				{isLoading ? (\n					<ActivityIndicator size="small" color="#fff" />\n				) : (\n					<Text className="text-primary-foreground font-medium">Sign In</Text>\n				)}\n			</TouchableOpacity>\n		</View>\n	);\n}`,
        type: "text",
      },
      "auth/native/nativewind/components/sign-up.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "0b0208cf24",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "trpc")}}\nimport { queryClient } from "@/utils/trpc";\n{{/if}}\n{{#if (eq api "orpc")}}\nimport { queryClient } from "@/utils/orpc";\n{{/if}}\nimport { useState } from "react";\nimport {\n	ActivityIndicator,\n	Text,\n	TextInput,\n	TouchableOpacity,\n	View,\n} from "react-native";\n\nexport function SignUp() {\n	const [name, setName] = useState("");\n	const [email, setEmail] = useState("");\n	const [password, setPassword] = useState("");\n	const [isLoading, setIsLoading] = useState(false);\n	const [error, setError] = useState<string | null>(null);\n\n	const handleSignUp = async () => {\n		setIsLoading(true);\n		setError(null);\n\n		await authClient.signUp.email(\n			{\n				name,\n				email,\n				password,\n			},\n			{\n				onError: (error) => {\n					setError(error.error?.message || "Failed to sign up");\n					setIsLoading(false);\n				},\n				onSuccess: () => {\n					setName("");\n					setEmail("");\n					setPassword("");\n					queryClient.refetchQueries();\n				},\n				onFinished: () => {\n					setIsLoading(false);\n				},\n			},\n		);\n	};\n\n	return (\n		<View className="mt-6 p-4 bg-card rounded-lg border border-border">\n			<Text className="text-lg font-semibold text-foreground mb-4">\n				Create Account\n			</Text>\n\n			{error && (\n				<View className="mb-4 p-3 bg-destructive/10 rounded-md">\n					<Text className="text-destructive text-sm">{error}</Text>\n				</View>\n			)}\n\n			<TextInput\n				className="mb-3 p-4 rounded-md bg-input text-foreground border border-input"\n				placeholder="Name"\n				value={name}\n				onChangeText={setName}\n				placeholderTextColor="#9CA3AF"\n			/>\n\n			<TextInput\n				className="mb-3 p-4 rounded-md bg-input text-foreground border border-input"\n				placeholder="Email"\n				value={email}\n				onChangeText={setEmail}\n				placeholderTextColor="#9CA3AF"\n				keyboardType="email-address"\n				autoCapitalize="none"\n			/>\n\n			<TextInput\n				className="mb-4 p-4 rounded-md bg-input text-foreground border border-input"\n				placeholder="Password"\n				value={password}\n				onChangeText={setPassword}\n				placeholderTextColor="#9CA3AF"\n				secureTextEntry\n			/>\n\n			<TouchableOpacity\n				onPress={handleSignUp}\n				disabled={isLoading}\n				className="bg-primary p-4 rounded-md flex-row justify-center items-center"\n			>\n				{isLoading ? (\n					<ActivityIndicator size="small" color="#fff" />\n				) : (\n					<Text className="text-primary-foreground font-medium">Sign Up</Text>\n				)}\n			</TouchableOpacity>\n		</View>\n	);\n}\n`,
        type: "text",
      },
      "auth/native/unistyles/app/(drawer)/index.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "60da1070a7",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useQuery } from "@tanstack/react-query";\nimport { ScrollView, Text, TouchableOpacity, View } from "react-native";\nimport { StyleSheet } from "react-native-unistyles";\n\nimport { Container } from "@/components/container";\nimport { SignIn } from "@/components/sign-in";\nimport { SignUp } from "@/components/sign-up";\n{{#if (eq api "orpc")}}\nimport { queryClient, orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { queryClient, trpc } from "@/utils/trpc";\n{{/if}}\n\nexport default function Home() {\n    {{#if (eq api "orpc")}}\n    const healthCheck = useQuery(orpc.healthCheck.queryOptions());\n    const privateData = useQuery(orpc.privateData.queryOptions());\n    {{/if}}\n    {{#if (eq api "trpc")}}\n    const healthCheck = useQuery(trpc.healthCheck.queryOptions());\n    const privateData = useQuery(trpc.privateData.queryOptions());\n    {{/if}}\n  const { data: session } = authClient.useSession();\n\n  return (\n    <Container>\n      <ScrollView>\n        <View style={styles.pageContainer}>\n          <Text style={styles.headerTitle}>BETTER T STACK</Text>\n          {session?.user ? (\n            <View style={styles.sessionInfoCard}>\n              <View style={styles.sessionUserRow}>\n                <Text style={styles.welcomeText}>\n                  Welcome,{" "}\n                  <Text style={styles.userNameText}>{session.user.name}</Text>\n                </Text>\n              </View>\n              <Text style={styles.emailText}>{session.user.email}</Text>\n\n              <TouchableOpacity\n                style={styles.signOutButton}\n                onPress={() => {\n                  authClient.signOut();\n                  queryClient.invalidateQueries();\n                }}\n              >\n                <Text style={styles.signOutButtonText}>Sign Out</Text>\n              </TouchableOpacity>\n            </View>\n          ) : null}\n          <View style={styles.apiStatusCard}>\n            <Text style={styles.cardTitle}>API Status</Text>\n            <View style={styles.apiStatusRow}>\n              <View\n                style={[\n                  styles.statusIndicatorDot,\n                  healthCheck.data\n                    ? styles.statusIndicatorGreen\n                    : styles.statusIndicatorRed,\n                ]}\n              />\n              <Text style={styles.mutedText}>\n                {healthCheck.isLoading\n                  ? "Checking..."\n                  : healthCheck.data\n                    ? "Connected to API"\n                    : "API Disconnected"}\n              </Text>\n            </View>\n          </View>\n          <View style={styles.privateDataCard}>\n            <Text style={styles.cardTitle}>Private Data</Text>\n            {privateData && (\n              <View>\n                <Text style={styles.mutedText}>\n                  {privateData.data?.message}\n                </Text>\n              </View>\n            )}\n          </View>\n          {!session?.user && (\n            <>\n              <SignIn />\n              <SignUp />\n            </>\n          )}\n        </View>\n      </ScrollView>\n    </Container>\n  );\n}\n\nconst styles = StyleSheet.create((theme) => ({\n  pageContainer: {\n    paddingHorizontal: 8,\n  },\n  headerTitle: {\n    color: theme?.colors?.typography,\n    fontSize: 30,\n    fontWeight: "bold",\n    marginBottom: 16,\n  },\n  sessionInfoCard: {\n    marginBottom: 24,\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: theme?.colors?.border,\n  },\n  sessionUserRow: {\n    flexDirection: "row",\n    justifyContent: "space-between",\n    alignItems: "center",\n    marginBottom: 8,\n  },\n  welcomeText: {\n    color: theme?.colors?.typography,\n    fontSize: 16,\n  },\n  userNameText: {\n    fontWeight: "500",\n    color: theme?.colors?.typography,\n  },\n  emailText: {\n    color: theme?.colors?.typography,\n    fontSize: 14,\n    marginBottom: 16,\n  },\n  signOutButton: {\n    backgroundColor: theme?.colors?.destructive,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 6,\n    alignSelf: "flex-start",\n  },\n  signOutButtonText: {\n    fontWeight: "500",\n  },\n  apiStatusCard: {\n    marginBottom: 24,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: theme?.colors?.border,\n    padding: 16,\n  },\n  cardTitle: {\n    marginBottom: 12,\n    fontWeight: "500",\n    color: theme?.colors?.typography,\n  },\n  apiStatusRow: {\n    flexDirection: "row",\n    alignItems: "center",\n    gap: 8,\n  },\n  statusIndicatorDot: {\n    height: 12,\n    width: 12,\n    borderRadius: 9999,\n  },\n  statusIndicatorGreen: {\n    backgroundColor: theme.colors.success,\n  },\n  statusIndicatorRed: {\n    backgroundColor: theme.colors.destructive,\n  },\n  mutedText: {\n    color: theme?.colors?.typography,\n  },\n  privateDataCard: {\n    marginBottom: 24,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: theme?.colors?.border,\n    padding: 16,\n  },\n}));\n`,
        type: "text",
      },
      "auth/native/unistyles/components/sign-in.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "b18567e2a0",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "trpc")}}\nimport { queryClient } from "@/utils/trpc";\n{{/if}}\n{{#if (eq api "orpc")}}\nimport { queryClient } from "@/utils/orpc";\n{{/if}}\nimport { useState } from "react";\nimport {\n  ActivityIndicator,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from "react-native";\nimport { StyleSheet } from "react-native-unistyles";\n\nexport function SignIn() {\n  const [email, setEmail] = useState("");\n  const [password, setPassword] = useState("");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleLogin = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    await authClient.signIn.email(\n      {\n        email,\n        password,\n      },\n      {\n        onError: (error) => {\n          setError(error.error?.message || "Failed to sign in");\n          setIsLoading(false);\n        },\n        onSuccess: () => {\n          setEmail("");\n          setPassword("");\n          queryClient.refetchQueries();\n        },\n        onFinished: () => {\n          setIsLoading(false);\n        },\n      },\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Sign In</Text>\n\n      {error && (\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorText}>{error}</Text>\n        </View>\n      )}\n\n      <TextInput\n        style={styles.input}\n        placeholder="Email"\n        value={email}\n        onChangeText={setEmail}\n        keyboardType="email-address"\n        autoCapitalize="none"\n      />\n\n      <TextInput\n        style={styles.input}\n        placeholder="Password"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n\n      <TouchableOpacity\n        onPress={handleLogin}\n        disabled={isLoading}\n        style={styles.button}\n      >\n        {isLoading ? (\n          <ActivityIndicator size="small" color="#fff" />\n        ) : (\n          <Text style={styles.buttonText}>Sign In</Text>\n        )}\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create((theme) => ({\n  container: {\n    marginTop: 24,\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: "600",\n    color: theme.colors.typography,\n    marginBottom: 16,\n  },\n  errorContainer: {\n    marginBottom: 16,\n    padding: 12,\n    borderRadius: 6,\n  },\n  errorText: {\n    color: theme.colors.destructive,\n    fontSize: 14,\n  },\n  input: {\n    marginBottom: 12,\n    padding: 16,\n    borderRadius: 6,\n    color: theme.colors.typography,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n  },\n  button: {\n    backgroundColor: theme.colors.primary,\n    padding: 16,\n    borderRadius: 6,\n    flexDirection: "row",\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  buttonText: {\n    fontWeight: "500",\n  },\n}));\n`,
        type: "text",
      },
      "auth/native/unistyles/components/sign-up.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "6d011348a6",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "trpc")}}\nimport { queryClient } from "@/utils/trpc";\n{{/if}}\n{{#if (eq api "orpc")}}\nimport { queryClient } from "@/utils/orpc";\n{{/if}}\nimport { useState } from "react";\nimport {\n  ActivityIndicator,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View,\n} from "react-native";\nimport { StyleSheet } from "react-native-unistyles";\n\nexport function SignUp() {\n  const [name, setName] = useState("");\n  const [email, setEmail] = useState("");\n  const [password, setPassword] = useState("");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSignUp = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    await authClient.signUp.email(\n      {\n        name,\n        email,\n        password,\n      },\n      {\n        onError: (error) => {\n          setError(error.error?.message || "Failed to sign up");\n          setIsLoading(false);\n        },\n        onSuccess: () => {\n          setName("");\n          setEmail("");\n          setPassword("");\n          queryClient.refetchQueries();\n        },\n        onFinished: () => {\n          setIsLoading(false);\n        },\n      },\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Create Account</Text>\n\n      {error && (\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorText}>{error}</Text>\n        </View>\n      )}\n\n      <TextInput\n        style={styles.input}\n        placeholder="Name"\n        value={name}\n        onChangeText={setName}\n      />\n\n      <TextInput\n        style={styles.input}\n        placeholder="Email"\n        value={email}\n        onChangeText={setEmail}\n        keyboardType="email-address"\n        autoCapitalize="none"\n      />\n\n      <TextInput\n        style={styles.inputLast}\n        placeholder="Password"\n        value={password}\n        onChangeText={setPassword}\n        secureTextEntry\n      />\n\n      <TouchableOpacity\n        onPress={handleSignUp}\n        disabled={isLoading}\n        style={styles.button}\n      >\n        {isLoading ? (\n          <ActivityIndicator size="small" color="#fff" />\n        ) : (\n          <Text style={styles.buttonText}>Sign Up</Text>\n        )}\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create((theme) => ({\n  container: {\n    marginTop: 24,\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n  },\n  title: {\n    fontSize: 18,\n    fontWeight: "600",\n    color: theme.colors.typography,\n    marginBottom: 16,\n  },\n  errorContainer: {\n    marginBottom: 16,\n    padding: 12,\n    borderRadius: 6,\n  },\n  errorText: {\n    color: theme.colors.destructive,\n    fontSize: 14,\n  },\n  input: {\n    marginBottom: 12,\n    padding: 16,\n    borderRadius: 6,\n    color: theme.colors.typography,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n  },\n  inputLast: {\n    marginBottom: 16,\n    padding: 16,\n    borderRadius: 6,\n    color: theme.colors.typography,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n  },\n  button: {\n    backgroundColor: theme.colors.primary,\n    padding: 16,\n    borderRadius: 6,\n    flexDirection: "row",\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  buttonText: {\n    fontWeight: "500",\n  },\n}));\n`,
        type: "text",
      },
      "auth/server/base/src/lib/auth.ts.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "70bcb75db7",
        },
        content: `{{#if (eq orm "prisma")}}\nimport { betterAuth } from "better-auth";\nimport { prismaAdapter } from "better-auth/adapters/prisma";\n{{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\nimport { expo } from "@better-auth/expo";\n{{/if}}\nimport prisma from "../../prisma";\n\nexport const auth = betterAuth({\n  database: prismaAdapter(prisma, {\n    {{#if (eq database "postgres")}}provider: "postgresql"{{/if}}\n    {{#if (eq database "sqlite")}}provider: "sqlite"{{/if}}\n    {{#if (eq database "mysql")}}provider: "mysql"{{/if}}\n    {{#if (eq database "mongodb")}}provider: "mongodb"{{/if}}\n  }),\n  trustedOrigins: [\n    process.env.CORS_ORIGIN || "",\n    {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n    "my-better-t-app://",\n    {{/if}}\n  ],\n  emailAndPassword: {\n    enabled: true,\n  }\n  {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n  , plugins: [expo()]\n  {{/if}}\n});\n{{/if}}\n\n{{#if (eq orm "drizzle")}}\n{{#if (or (eq runtime "bun") (eq runtime "node"))}}\nimport { betterAuth } from "better-auth";\nimport { drizzleAdapter } from "better-auth/adapters/drizzle";\n{{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\nimport { expo } from "@better-auth/expo";\n{{/if}}\nimport { db } from "../db";\nimport * as schema from "../db/schema/auth";\n\nexport const auth = betterAuth({\n  database: drizzleAdapter(db, {\n    {{#if (eq database "postgres")}}provider: "pg",{{/if}}\n    {{#if (eq database "sqlite")}}provider: "sqlite",{{/if}}\n    {{#if (eq database "mysql")}}provider: "mysql",{{/if}}\n    schema: schema,\n  }),\n  trustedOrigins: [\n    process.env.CORS_ORIGIN || "",\n    {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n    "my-better-t-app://",\n    {{/if}}\n  ],\n  emailAndPassword: {\n    enabled: true,\n  },\n  secret: process.env.BETTER_AUTH_SECRET,\n  baseURL: process.env.BETTER_AUTH_URL,\n  {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n  plugins: [expo()],\n  {{/if}}\n});\n{{/if}}\n\n{{#if (eq runtime "workers")}}\nimport { betterAuth } from "better-auth";\nimport { drizzleAdapter } from "better-auth/adapters/drizzle";\n{{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\nimport { expo } from "@better-auth/expo";\n{{/if}}\nimport { db } from "@/db";\nimport * as schema from "../db/schema/auth";\nimport { env } from "cloudflare:workers";\n\nexport const auth = betterAuth({\n   database: drizzleAdapter(db, {\n    {{#if (eq database "postgres")}}provider: "pg",{{/if}}\n    {{#if (eq database "sqlite")}}provider: "sqlite",{{/if}}\n    {{#if (eq database "mysql")}}provider: "mysql",{{/if}}\n    schema: schema,\n  }),\n  trustedOrigins: [env.CORS_ORIGIN],\n  emailAndPassword: {\n    enabled: true,\n  },\n  secret: env.BETTER_AUTH_SECRET,\n  baseURL: env.BETTER_AUTH_URL,\n  {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n  plugins: [expo()],\n  {{/if}}\n});\n{{/if}}\n{{/if}}\n\n{{#if (eq orm "mongoose")}}\nimport { betterAuth } from "better-auth";\nimport { mongodbAdapter } from "better-auth/adapters/mongodb";\n{{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\nimport { expo } from "@better-auth/expo";\n{{/if}}\nimport { client } from "../db";\n\nexport const auth = betterAuth({\n  database: mongodbAdapter(client),\n  trustedOrigins: [\n    process.env.CORS_ORIGIN || "",\n    {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n    "my-better-t-app://",\n    {{/if}}\n  ],\n  emailAndPassword: {\n    enabled: true,\n  }\n  {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n  , plugins: [expo()]\n  {{/if}}\n});\n{{/if}}\n\n{{#if (eq orm "none")}}\nimport { betterAuth } from "better-auth";\n{{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\nimport { expo } from "@better-auth/expo";\n{{/if}}\n\nexport const auth = betterAuth({\n  database: "", // Invalid configuration\n  trustedOrigins: [\n    process.env.CORS_ORIGIN || "",\n    {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n    "my-better-t-app://",\n    {{/if}}\n  ],\n  emailAndPassword: {\n    enabled: true,\n  }\n  {{#if (or (includes frontend "native-nativewind") (includes frontend "native-unistyles"))}}\n  , plugins: [expo()]\n  {{/if}}\n});\n{{/if}}\n`,
        type: "text",
      },
      "auth/server/db/drizzle/mysql/src/db/schema/auth.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "f865fa9316",
        },
        content: `import {\n  mysqlTable,\n  varchar,\n  text,\n  timestamp,\n  boolean,\n} from "drizzle-orm/mysql-core";\n\nexport const user = mysqlTable("user", {\n  id: varchar("id", { length: 36 }).primaryKey(),\n  name: text("name").notNull(),\n  email: varchar("email", { length: 255 }).notNull().unique(),\n  emailVerified: boolean("email_verified").notNull(),\n  image: text("image"),\n  createdAt: timestamp("created_at").notNull(),\n  updatedAt: timestamp("updated_at").notNull(),\n});\n\nexport const session = mysqlTable("session", {\n  id: varchar("id", { length: 36 }).primaryKey(),\n  expiresAt: timestamp("expires_at").notNull(),\n  token: varchar("token", { length: 255 }).notNull().unique(),\n  createdAt: timestamp("created_at").notNull(),\n  updatedAt: timestamp("updated_at").notNull(),\n  ipAddress: text("ip_address"),\n  userAgent: text("user_agent"),\n  userId: varchar("user_id", { length: 36 })\n    .notNull()\n    .references(() => user.id, { onDelete: "cascade" }),\n});\n\nexport const account = mysqlTable("account", {\n  id: varchar("id", { length: 36 }).primaryKey(),\n  accountId: text("account_id").notNull(),\n  providerId: text("provider_id").notNull(),\n  userId: varchar("user_id", { length: 36 })\n    .notNull()\n    .references(() => user.id, { onDelete: "cascade" }),\n  accessToken: text("access_token"),\n  refreshToken: text("refresh_token"),\n  idToken: text("id_token"),\n\n  accessTokenExpiresAt: timestamp("access_token_expires_at"),\n  refreshTokenExpiresAt: timestamp("refresh_token_expires_at"),\n  scope: text("scope"),\n  password: text("password"),\n  createdAt: timestamp("created_at").notNull(),\n  updatedAt: timestamp("updated_at").notNull(),\n});\n\nexport const verification = mysqlTable("verification", {\n  id: varchar("id", { length: 36 }).primaryKey(),\n  identifier: text("identifier").notNull(),\n  value: text("value").notNull(),\n  expiresAt: timestamp("expires_at").notNull(),\n  createdAt: timestamp("created_at"),\n  updatedAt: timestamp("updated_at"),\n});\n`,
        type: "text",
      },
      "auth/server/db/drizzle/postgres/src/db/schema/auth.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "11be4c3757",
        },
        content: `import { pgTable, text, timestamp, boolean, serial } from "drizzle-orm/pg-core";\n\nexport const user = pgTable("user", {\n					id: text("id").primaryKey(),\n					name: text('name').notNull(),\n email: text('email').notNull().unique(),\n emailVerified: boolean('email_verified').notNull(),\n image: text('image'),\n createdAt: timestamp('created_at').notNull(),\n updatedAt: timestamp('updated_at').notNull()\n				});\n\nexport const session = pgTable("session", {\n					id: text("id").primaryKey(),\n					expiresAt: timestamp('expires_at').notNull(),\n token: text('token').notNull().unique(),\n createdAt: timestamp('created_at').notNull(),\n updatedAt: timestamp('updated_at').notNull(),\n ipAddress: text('ip_address'),\n userAgent: text('user_agent'),\n userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' })\n				});\n\nexport const account = pgTable("account", {\n					id: text("id").primaryKey(),\n					accountId: text('account_id').notNull(),\n providerId: text('provider_id').notNull(),\n userId: text('user_id').notNull().references(()=> user.id, { onDelete: 'cascade' }),\n accessToken: text('access_token'),\n refreshToken: text('refresh_token'),\n idToken: text('id_token'),\n accessTokenExpiresAt: timestamp('access_token_expires_at'),\n refreshTokenExpiresAt: timestamp('refresh_token_expires_at'),\n scope: text('scope'),\n password: text('password'),\n createdAt: timestamp('created_at').notNull(),\n updatedAt: timestamp('updated_at').notNull()\n				});\n\nexport const verification = pgTable("verification", {\n					id: text("id").primaryKey(),\n					identifier: text('identifier').notNull(),\n value: text('value').notNull(),\n expiresAt: timestamp('expires_at').notNull(),\n createdAt: timestamp('created_at'),\n updatedAt: timestamp('updated_at')\n				});\n`,
        type: "text",
      },
      "auth/server/db/drizzle/sqlite/src/db/schema/auth.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "2fd698c3c5",
        },
        content: `import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";\n\nexport const user = sqliteTable("user", {\n  id: text("id").primaryKey(),\n  name: text("name").notNull(),\n  email: text("email").notNull().unique(),\n  emailVerified: integer("email_verified", { mode: "boolean" }).notNull(),\n  image: text("image"),\n  createdAt: integer("created_at", { mode: "timestamp" }).notNull(),\n  updatedAt: integer("updated_at", { mode: "timestamp" }).notNull(),\n});\n\nexport const session = sqliteTable("session", {\n  id: text("id").primaryKey(),\n  expiresAt: integer("expires_at", { mode: "timestamp" }).notNull(),\n  token: text("token").notNull().unique(),\n  createdAt: integer("created_at", { mode: "timestamp" }).notNull(),\n  updatedAt: integer("updated_at", { mode: "timestamp" }).notNull(),\n  ipAddress: text("ip_address"),\n  userAgent: text("user_agent"),\n  userId: text("user_id")\n    .notNull()\n    .references(() => user.id),\n});\n\nexport const account = sqliteTable("account", {\n  id: text("id").primaryKey(),\n  accountId: text("account_id").notNull(),\n  providerId: text("provider_id").notNull(),\n  userId: text("user_id")\n    .notNull()\n    .references(() => user.id),\n  accessToken: text("access_token"),\n  refreshToken: text("refresh_token"),\n  idToken: text("id_token"),\n  accessTokenExpiresAt: integer("access_token_expires_at", {\n    mode: "timestamp",\n  }),\n  refreshTokenExpiresAt: integer("refresh_token_expires_at", {\n    mode: "timestamp",\n  }),\n  scope: text("scope"),\n  password: text("password"),\n  createdAt: integer("created_at", { mode: "timestamp" }).notNull(),\n  updatedAt: integer("updated_at", { mode: "timestamp" }).notNull(),\n});\n\nexport const verification = sqliteTable("verification", {\n  id: text("id").primaryKey(),\n  identifier: text("identifier").notNull(),\n  value: text("value").notNull(),\n  expiresAt: integer("expires_at", { mode: "timestamp" }).notNull(),\n  createdAt: integer("created_at", { mode: "timestamp" }),\n  updatedAt: integer("updated_at", { mode: "timestamp" }),\n});\n`,
        type: "text",
      },
      "auth/server/db/mongoose/mongodb/src/db/models/auth.model.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "844c2e8227",
        },
        content: `import mongoose from 'mongoose';\n\nconst { Schema, model } = mongoose;\n\nconst userSchema = new Schema(\n    {\n        _id: { type: String },\n        name: { type: String, required: true },\n        email: { type: String, required: true, unique: true },\n        emailVerified: { type: Boolean, required: true },\n        image: { type: String },\n        createdAt: { type: Date, required: true },\n        updatedAt: { type: Date, required: true },\n    },\n    { collection: 'user' }\n);\n\nconst sessionSchema = new Schema(\n    {\n        _id: { type: String },\n        expiresAt: { type: Date, required: true },\n        token: { type: String, required: true, unique: true },\n        createdAt: { type: Date, required: true },\n        updatedAt: { type: Date, required: true },\n        ipAddress: { type: String },\n        userAgent: { type: String },\n        userId: { type: String, ref: 'User', required: true },\n    },\n    { collection: 'session' }\n);\n\nconst accountSchema = new Schema(\n    {\n        _id: { type: String },\n        accountId: { type: String, required: true },\n        providerId: { type: String, required: true },\n        userId: { type: String, ref: 'User', required: true },\n        accessToken: { type: String },\n        refreshToken: { type: String },\n        idToken: { type: String },\n        accessTokenExpiresAt: { type: Date },\n        refreshTokenExpiresAt: { type: Date },\n        scope: { type: String },\n        password: { type: String },\n        createdAt: { type: Date, required: true },\n        updatedAt: { type: Date, required: true },\n    },\n    { collection: 'account' }\n);\n\nconst verificationSchema = new Schema(\n    {\n        _id: { type: String },\n        identifier: { type: String, required: true },\n        value: { type: String, required: true },\n        expiresAt: { type: Date, required: true },\n        createdAt: { type: Date },\n        updatedAt: { type: Date },\n    },\n    { collection: 'verification' }\n);\n\nconst User = model('User', userSchema);\nconst Session = model('Session', sessionSchema);\nconst Account = model('Account', accountSchema);\nconst Verification = model('Verification', verificationSchema);\n\nexport { User, Session, Account, Verification };\n`,
        type: "text",
      },
      "auth/server/db/prisma/mongodb/prisma/schema/auth.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "ef642790d1",
        },
        content: `model User {\n  id            String    @id @map("_id")\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n\n  @@unique([email])\n  @@map("user")\n}\n\nmodel Session {\n  id        String   @id @map("_id")\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map("session")\n}\n\nmodel Account {\n  id                    String    @id @map("_id")\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map("account")\n}\n\nmodel Verification {\n  id         String    @id @map("_id")\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map("verification")\n}\n`,
        type: "text",
      },
      "auth/server/db/prisma/mysql/prisma/schema/auth.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "f747cb428d",
        },
        content: `model User {\n  id            String    @id\n  name          String    @db.Text\n  email         String\n  emailVerified Boolean\n  image         String?   @db.Text\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n\n  @@unique([email])\n  @@map("user")\n}\n\nmodel Session {\n  id        String   @id\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?  @db.Text\n  userAgent String?  @db.Text\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map("session")\n}\n\nmodel Account {\n  id                    String    @id\n  accountId             String    @db.Text\n  providerId            String    @db.Text\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?   @db.Text\n  refreshToken          String?   @db.Text\n  idToken               String?   @db.Text\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?   @db.Text\n  password              String?   @db.Text\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map("account")\n}\n\nmodel Verification {\n  id         String    @id\n  identifier String    @db.Text\n  value      String    @db.Text\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map("verification")\n}\n`,
        type: "text",
      },
      "auth/server/db/prisma/postgres/prisma/schema/auth.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "ef642790d1",
        },
        content: `model User {\n  id            String    @id @map("_id")\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n\n  @@unique([email])\n  @@map("user")\n}\n\nmodel Session {\n  id        String   @id @map("_id")\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map("session")\n}\n\nmodel Account {\n  id                    String    @id @map("_id")\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map("account")\n}\n\nmodel Verification {\n  id         String    @id @map("_id")\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map("verification")\n}\n`,
        type: "text",
      },
      "auth/server/db/prisma/sqlite/prisma/schema/auth.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "ef642790d1",
        },
        content: `model User {\n  id            String    @id @map("_id")\n  name          String\n  email         String\n  emailVerified Boolean\n  image         String?\n  createdAt     DateTime\n  updatedAt     DateTime\n  sessions      Session[]\n  accounts      Account[]\n\n  @@unique([email])\n  @@map("user")\n}\n\nmodel Session {\n  id        String   @id @map("_id")\n  expiresAt DateTime\n  token     String\n  createdAt DateTime\n  updatedAt DateTime\n  ipAddress String?\n  userAgent String?\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([token])\n  @@map("session")\n}\n\nmodel Account {\n  id                    String    @id @map("_id")\n  accountId             String\n  providerId            String\n  userId                String\n  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime\n  updatedAt             DateTime\n\n  @@map("account")\n}\n\nmodel Verification {\n  id         String    @id @map("_id")\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime?\n  updatedAt  DateTime?\n\n  @@map("verification")\n}\n`,
        type: "text",
      },
      "auth/server/next/src/app/api/auth/[...all]/route.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "1eeae5d0e3",
        },
        content: `import { auth } from "@/lib/auth";\nimport { toNextJsHandler } from "better-auth/next-js";\n\nexport const { GET, POST } = toNextJsHandler(auth.handler);\n`,
        type: "text",
      },
      "auth/web/nuxt/app/components/SignInForm.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "4d70f0e8c7",
        },
        content: `<script setup lang="ts">\nimport z from 'zod/v4'\nconst {$authClient} = useNuxtApp()\nimport type { FormSubmitEvent } from '#ui/types'\n\nconst emit = defineEmits(['switchToSignUp'])\n\nconst toast = useToast()\nconst loading = ref(false)\n\nconst schema = z.object({\n  email: z.email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n})\n\ntype Schema = z.output<typeof schema>\n\nconst state = reactive({\n  email: '',\n  password: '',\n})\n\nasync function onSubmit (event: FormSubmitEvent<Schema>) {\n  loading.value = true\n  try {\n    await $authClient.signIn.email(\n      {\n        email: event.data.email,\n        password: event.data.password,\n      },\n      {\n        onSuccess: () => {\n          toast.add({ title: 'Sign in successful' })\n          navigateTo('/dashboard', { replace: true })\n        },\n        onError: (error) => {\n          toast.add({ title: 'Sign in failed', description: error.error.message })\n        },\n      },\n    )\n  } catch (error: any) {\n     toast.add({ title: 'An unexpected error occurred', description: error.message || 'Please try again.' })\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <div class="mx-auto w-full mt-10 max-w-md p-6">\n    <h1 class="mb-6 text-center text-3xl font-bold">Welcome Back</h1>\n\n    <UForm :schema="schema" :state="state" class="space-y-4" @submit="onSubmit">\n      <UFormField label="Email" name="email">\n        <UInput v-model="state.email" type="email" class="w-full" />\n      </UFormField>\n\n      <UFormField label="Password" name="password">\n        <UInput v-model="state.password" type="password" class="w-full" />\n      </UFormField>\n\n      <UButton type="submit" block :loading="loading">\n        Sign In\n      </UButton>\n    </UForm>\n\n    <div class="mt-4 text-center">\n      <UButton\n        variant="link"\n        @click="$emit('switchToSignUp')"\n        class="text-primary hover:text-primary-dark"\n      >\n        Need an account? Sign Up\n      </UButton>\n    </div>\n  </div>\n</template>\n`,
        type: "text",
      },
      "auth/web/nuxt/app/components/SignUpForm.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "414fb57522",
        },
        content: `<script setup lang="ts">\nimport z from 'zod/v4'\nimport type { FormSubmitEvent } from '#ui/types'\nconst {$authClient} = useNuxtApp()\n\nconst emit = defineEmits(['switchToSignIn'])\n\nconst toast = useToast()\nconst loading = ref(false)\n\nconst schema = z.object({\n  name: z.string().min(2, 'Name must be at least 2 characters'),\n  email: z.email('Invalid email address'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n})\n\ntype Schema = z.output<typeof schema>\n\nconst state = reactive({\n  name: '',\n  email: '',\n  password: '',\n})\n\nasync function onSubmit (event: FormSubmitEvent<Schema>) {\n  loading.value = true\n  try {\n    await $authClient.signUp.email(\n      {\n        name: event.data.name,\n        email: event.data.email,\n        password: event.data.password,\n      },\n      {\n        onSuccess: () => {\n          toast.add({ title: 'Sign up successful' })\n          navigateTo('/dashboard', { replace: true })\n        },\n        onError: (error) => {\n          toast.add({ title: 'Sign up failed', description: error.error.message })\n        },\n      },\n    )\n  } catch (error: any) {\n     toast.add({ title: 'An unexpected error occurred', description: error.message || 'Please try again.' })\n  } finally {\n    loading.value = false\n  }\n}\n</script>\n\n<template>\n  <div class="mx-auto w-full mt-10 max-w-md p-6">\n    <h1 class="mb-6 text-center text-3xl font-bold">Create Account</h1>\n\n    <UForm :schema="schema" :state="state" class="space-y-4" @submit="onSubmit">\n       <UFormField label="Name" name="name">\n        <UInput v-model="state.name" class="w-full" />\n      </UFormField>\n\n      <UFormField label="Email" name="email">\n        <UInput v-model="state.email" type="email" class="w-full" />\n      </UFormField>\n\n      <UFormField label="Password" name="password">\n        <UInput v-model="state.password" type="password" class="w-full" />\n      </UFormField>\n\n      <UButton type="submit" block :loading="loading">\n        Sign Up\n      </UButton>\n    </UForm>\n\n    <div class="mt-4 text-center">\n      <UButton\n        variant="link"\n        @click="$emit('switchToSignIn')"\n        class="text-primary hover:text-primary-dark"\n      >\n        Already have an account? Sign In\n      </UButton>\n    </div>\n  </div>\n</template>\n`,
        type: "text",
      },
      "auth/web/nuxt/app/components/UserMenu.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "fc4335c0e0",
        },
        content: `<script setup lang="ts">\n\nconst {$authClient} = useNuxtApp()\nconst session = $authClient.useSession()\nconst toast = useToast()\n\nconst handleSignOut = async () => {\n  try {\n    await $authClient.signOut({\n      fetchOptions: {\n        onSuccess: async () => {\n          toast.add({ title: 'Signed out successfully' })\n          await navigateTo('/', { replace: true, external: true })\n        },\n        onError: (error) => {\n           toast.add({ title: 'Sign out failed', description: error?.error?.message || 'Unknown error'})\n        }\n      },\n    })\n  } catch (error: any) {\n     toast.add({ title: 'An unexpected error occurred during sign out', description: error.message || 'Please try again.'})\n  }\n}\n</script>\n\n<template>\n  <div>\n    <USkeleton v-if="session.isPending" class="h-9 w-24" />\n\n    <UButton v-else-if="!session.data" variant="outline" to="/login">\n      Sign In\n    </UButton>\n\n    <UButton\n      v-else\n      variant="solid"\n      icon="i-lucide-log-out"\n      label="Sign out"\n      @click="handleSignOut()"\n    />\n  </div>\n</template>\n`,
        type: "text",
      },
      "auth/web/nuxt/app/middleware/auth.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "e1df215c73",
        },
        content: `export default defineNuxtRouteMiddleware(async (to, from) => {\n  if (import.meta.server) return\n\n  const { $authClient } = useNuxtApp()\n  const session = $authClient.useSession()\n\n  if (session.value.isPending || !session.value) {\n    if (to.path === "/dashboard") {\n      return navigateTo("/login");\n    }\n  }\n});\n`,
        type: "text",
      },
      "auth/web/nuxt/app/pages/dashboard.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "c21e12fd96",
        },
        content: `<script setup lang="ts">\nimport { useQuery } from '@tanstack/vue-query'\nconst {$authClient} = useNuxtApp()\n\ndefinePageMeta({\n  middleware: ['auth']\n})\n\nconst { $orpc } = useNuxtApp()\n\nconst session = $authClient.useSession()\n\nconst privateData = useQuery($orpc.privateData.queryOptions())\n\n</script>\n\n<template>\n  <div class="container mx-auto p-4">\n      <h1 class="text-2xl font-bold mb-4">Dashboard</h1>\n     <div v-if="session?.data?.user">\n        <p class="mb-2">Welcome {{ session.data.user.name }}</p>\n     </div>\n        <div v-if="privateData.status.value === 'pending'">Loading private data...</div>\n        <div v-else-if="privateData.status.value === 'error'">Error loading private data: {{ privateData.error.value?.message }}</div>\n        <p v-else-if="privateData.data.value">Private Data: {{ privateData.data.value.message }}</p>\n  </div>\n</template>\n`,
        type: "text",
      },
      "auth/web/nuxt/app/pages/login.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "d6c3c73480",
        },
        content: `<script setup lang="ts">\nconst { $authClient } = useNuxtApp();\nimport SignInForm from "~/components/SignInForm.vue";\nimport SignUpForm from "~/components/SignUpForm.vue";\n\nconst session = $authClient.useSession();\nconst showSignIn = ref(true);\n\nwatchEffect(() => {\n  if (!session?.value.isPending && session?.value.data) {\n    navigateTo("/dashboard", { replace: true });\n  }\n});\n</script>\n\n<template>\n  <div>\n    <Loader v-if="session.isPending" />\n    <div v-else-if="!session.data">\n      <SignInForm v-if="showSignIn" @switch-to-sign-up="showSignIn = false" />\n      <SignUpForm v-else @switch-to-sign-in="showSignIn = true" />\n    </div>\n  </div>\n</template>\n`,
        type: "text",
      },
      "auth/web/nuxt/app/plugins/auth-client.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "6fc7eac334",
        },
        content: `import { createAuthClient } from "better-auth/vue";\n\nexport default defineNuxtPlugin(nuxtApp => {\n  const config = useRuntimeConfig()\n  const serverUrl = config.public.serverURL\n\n  const authClient = createAuthClient({\n    baseURL: serverUrl\n  })\n\n  return {\n    provide: {\n      authClient: authClient\n    }\n  }\n})\n`,
        type: "text",
      },
      "auth/web/react/base/src/lib/auth-client.ts.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "f4805c24d3",
        },
        content: `import { createAuthClient } from "better-auth/react";\n\nexport const authClient = createAuthClient({\n  baseURL:\n    {{#if (includes frontend "next")}}\n      process.env.NEXT_PUBLIC_SERVER_URL,\n    {{else}}\n      import.meta.env.VITE_SERVER_URL,\n    {{/if}}\n});\n`,
        type: "text",
      },
      "auth/web/react/next/src/app/dashboard/page.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "354fab95c7",
        },
        content: `"use client"\nimport { authClient } from "@/lib/auth-client";\n{{#if (eq api "orpc")}}\nimport { useQuery } from "@tanstack/react-query";\nimport { orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { useQuery } from "@tanstack/react-query";\nimport { trpc } from "@/utils/trpc";\n{{/if}}\nimport { useRouter } from "next/navigation";\nimport { useEffect } from "react";\n\nexport default function Dashboard() {\n  const router = useRouter();\n  const { data: session, isPending } = authClient.useSession();\n\n  {{#if (eq api "orpc")}}\n  const privateData = useQuery(orpc.privateData.queryOptions());\n  {{/if}}\n  {{#if (eq api "trpc")}}\n  const privateData = useQuery(trpc.privateData.queryOptions());\n  {{/if}}\n\n  useEffect(() => {\n    if (!session && !isPending) {\n      router.push("/login");\n    }\n  }, [session, isPending]);\n\n  if (isPending) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <p>Welcome {session?.user.name}</p>\n      {{#if (eq api "orpc")}}\n      <p>privateData: {privateData.data?.message}</p>\n      {{/if}}\n      {{#if (eq api "trpc")}}\n      <p>privateData: {privateData.data?.message}</p>\n      {{/if}}\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/next/src/app/login/page.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "bdd103cc10",
        },
        content: `"use client"\n\nimport SignInForm from "@/components/sign-in-form";\nimport SignUpForm from "@/components/sign-up-form";\nimport { useState } from "react";\n\n\nexport default function LoginPage() {\n  const [showSignIn, setShowSignIn] = useState(false);\n\n  return showSignIn ? (\n    <SignInForm onSwitchToSignUp={() => setShowSignIn(false)} />\n  ) : (\n    <SignUpForm onSwitchToSignIn={() => setShowSignIn(true)} />\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/next/src/components/sign-in-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "f14d3860de",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\nimport { useRouter } from "next/navigation";\n\nexport default function SignInForm({\n  onSwitchToSignUp,\n}: {\n  onSwitchToSignUp: () => void;\n}) {\n  const router = useRouter()\n  const { isPending } = authClient.useSession();\n\n  const form = useForm({\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n    onSubmit: async ({ value }) => {\n      await authClient.signIn.email(\n        {\n          email: value.email,\n          password: value.password,\n        },\n        {\n          onSuccess: () => {\n            router.push("/dashboard")\n            toast.success("Sign in successful");\n          },\n          onError: (error) => {\n            toast.error(error.error.message);\n          },\n        },\n      );\n    },\n    validators: {\n      onSubmit: z.object({\n        email: z.email("Invalid email address"),\n        password: z.string().min(8, "Password must be at least 8 characters"),\n      }),\n    },\n  });\n\n  if (isPending) {\n    return <Loader />;\n  }\n\n  return (\n    <div className="mx-auto w-full mt-10 max-w-md p-6">\n      <h1 className="mb-6 text-center text-3xl font-bold">Welcome Back</h1>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          void form.handleSubmit();\n        }}\n        className="space-y-4"\n      >\n        <div>\n          <form.Field name="email">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Email</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="email"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="password">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Password</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="password"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <form.Subscribe>\n          {(state) => (\n            <Button\n              type="submit"\n              className="w-full"\n              disabled={!state.canSubmit || state.isSubmitting}\n            >\n              {state.isSubmitting ? "Submitting..." : "Sign In"}\n            </Button>\n          )}\n        </form.Subscribe>\n      </form>\n\n      <div className="mt-4 text-center">\n        <Button\n          variant="link"\n          onClick={onSwitchToSignUp}\n          className="text-indigo-600 hover:text-indigo-800"\n        >\n          Need an account? Sign Up\n        </Button>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/next/src/components/sign-up-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "2235152dbf",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\nimport { useRouter } from "next/navigation";\n\nexport default function SignUpForm({\n  onSwitchToSignIn,\n}: {\n  onSwitchToSignIn: () => void;\n}) {\n  const router = useRouter();\n  const { isPending } = authClient.useSession();\n\n  const form = useForm({\n    defaultValues: {\n      email: "",\n      password: "",\n      name: "",\n    },\n    onSubmit: async ({ value }) => {\n      await authClient.signUp.email(\n        {\n          email: value.email,\n          password: value.password,\n          name: value.name,\n        },\n        {\n          onSuccess: () => {\n            router.push("/dashboard");\n            toast.success("Sign up successful");\n          },\n          onError: (error) => {\n            toast.error(error.error.message);\n          },\n        },\n      );\n    },\n    validators: {\n      onSubmit: z.object({\n        name: z.string().min(2, "Name must be at least 2 characters"),\n        email: z.email("Invalid email address"),\n        password: z.string().min(8, "Password must be at least 8 characters"),\n      }),\n    },\n  });\n\n  if (isPending) {\n    return <Loader />;\n  }\n\n  return (\n    <div className="mx-auto w-full mt-10 max-w-md p-6">\n      <h1 className="mb-6 text-center text-3xl font-bold">Create Account</h1>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          void form.handleSubmit();\n        }}\n        className="space-y-4"\n      >\n        <div>\n          <form.Field name="name">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Name</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="email">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Email</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="email"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="password">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Password</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="password"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <form.Subscribe>\n          {(state) => (\n            <Button\n              type="submit"\n              className="w-full"\n              disabled={!state.canSubmit || state.isSubmitting}\n            >\n              {state.isSubmitting ? "Submitting..." : "Sign Up"}\n            </Button>\n          )}\n        </form.Subscribe>\n      </form>\n\n      <div className="mt-4 text-center">\n        <Button\n          variant="link"\n          onClick={onSwitchToSignIn}\n          className="text-indigo-600 hover:text-indigo-800"\n        >\n          Already have an account? Sign In\n        </Button>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/next/src/components/theme-provider.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "454fd475e0",
        },
        content: `"use client"\n\nimport * as React from "react"\nimport { ThemeProvider as NextThemesProvider } from "next-themes"\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: React.ComponentProps<typeof NextThemesProvider>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n`,
        type: "text",
      },
      "auth/web/react/next/src/components/user-menu.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "2a991ef0ba",
        },
        content: `import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { authClient } from "@/lib/auth-client";\nimport { Button } from "./ui/button";\nimport { Skeleton } from "./ui/skeleton";\nimport { useRouter } from "next/navigation";\nimport Link from "next/link";\n\nexport default function UserMenu() {\n  const router = useRouter();\n  const { data: session, isPending } = authClient.useSession();\n\n  if (isPending) {\n    return <Skeleton className="h-9 w-24" />;\n  }\n\n  if (!session) {\n    return (\n      <Button variant="outline" asChild>\n        <Link href="/login">Sign In</Link>\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant="outline">{session.user.name}</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className="bg-card">\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>{session.user.email}</DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Button\n            variant="destructive"\n            className="w-full"\n            onClick={() => {\n              authClient.signOut({\n                fetchOptions: {\n                  onSuccess: () => {\n                    router.push("/");\n                  },\n                },\n              });\n            }}\n          >\n            Sign Out\n          </Button>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/react-router/src/components/sign-in-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "24c93e0c97",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { useNavigate } from "react-router";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\n\nexport default function SignInForm({\n  onSwitchToSignUp,\n}: {\n  onSwitchToSignUp: () => void;\n}) {\n  const navigate = useNavigate();\n  const { isPending } = authClient.useSession();\n\n  const form = useForm({\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n    onSubmit: async ({ value }) => {\n      await authClient.signIn.email(\n        {\n          email: value.email,\n          password: value.password,\n        },\n        {\n          onSuccess: () => {\n            navigate("/dashboard");\n            toast.success("Sign in successful");\n          },\n          onError: (error) => {\n            toast.error(error.error.message);\n          },\n        }\n      );\n    },\n    validators: {\n      onSubmit: z.object({\n        email: z.email("Invalid email address"),\n        password: z.string().min(8, "Password must be at least 8 characters"),\n      }),\n    },\n  });\n\n  if (isPending) {\n    return <Loader />;\n  }\n\n  return (\n    <div className="mx-auto w-full mt-10 max-w-md p-6">\n      <h1 className="mb-6 text-center text-3xl font-bold">Welcome Back</h1>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          void form.handleSubmit();\n        }}\n        className="space-y-4"\n      >\n        <div>\n          <form.Field name="email">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Email</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="email"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="password">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Password</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="password"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <form.Subscribe>\n          {(state) => (\n            <Button\n              type="submit"\n              className="w-full"\n              disabled={!state.canSubmit || state.isSubmitting}\n            >\n              {state.isSubmitting ? "Submitting..." : "Sign In"}\n            </Button>\n          )}\n        </form.Subscribe>\n      </form>\n\n      <div className="mt-4 text-center">\n        <Button\n          variant="link"\n          onClick={onSwitchToSignUp}\n          className="text-indigo-600 hover:text-indigo-800"\n        >\n          Need an account? Sign Up\n        </Button>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/react-router/src/components/sign-up-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "e255f8a212",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { useNavigate } from "react-router";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\n\nexport default function SignUpForm({\n  onSwitchToSignIn,\n}: {\n  onSwitchToSignIn: () => void;\n}) {\n  const navigate = useNavigate();\n  const { isPending } = authClient.useSession();\n\n  const form = useForm({\n    defaultValues: {\n      email: "",\n      password: "",\n      name: "",\n    },\n    onSubmit: async ({ value }) => {\n      await authClient.signUp.email(\n        {\n          email: value.email,\n          password: value.password,\n          name: value.name,\n        },\n        {\n          onSuccess: () => {\n            navigate("/dashboard");\n            toast.success("Sign up successful");\n          },\n          onError: (error) => {\n            toast.error(error.error.message);\n          },\n        }\n      );\n    },\n    validators: {\n      onSubmit: z.object({\n        name: z.string().min(2, "Name must be at least 2 characters"),\n        email: z.email("Invalid email address"),\n        password: z.string().min(8, "Password must be at least 8 characters"),\n      }),\n    },\n  });\n\n  if (isPending) {\n    return <Loader />;\n  }\n\n  return (\n    <div className="mx-auto w-full mt-10 max-w-md p-6">\n      <h1 className="mb-6 text-center text-3xl font-bold">Create Account</h1>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          void form.handleSubmit();\n        }}\n        className="space-y-4"\n      >\n        <div>\n          <form.Field name="name">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Name</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="email">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Email</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="email"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="password">\n            {(field) => (\n              <div className="space-y-2">\n                <Label htmlFor={field.name}>Password</Label>\n                <Input\n                  id={field.name}\n                  name={field.name}\n                  type="password"\n                  value={field.state.value}\n                  onBlur={field.handleBlur}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                />\n                {field.state.meta.errors.map((error) => (\n                  <p key={error?.message} className="text-red-500">\n                    {error?.message}\n                  </p>\n                ))}\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <form.Subscribe>\n          {(state) => (\n            <Button\n              type="submit"\n              className="w-full"\n              disabled={!state.canSubmit || state.isSubmitting}\n            >\n              {state.isSubmitting ? "Submitting..." : "Sign Up"}\n            </Button>\n          )}\n        </form.Subscribe>\n      </form>\n\n      <div className="mt-4 text-center">\n        <Button\n          variant="link"\n          onClick={onSwitchToSignIn}\n          className="text-indigo-600 hover:text-indigo-800"\n        >\n          Already have an account? Sign In\n        </Button>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/react-router/src/components/user-menu.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "e0e976a589",
        },
        content: `import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { authClient } from "@/lib/auth-client";\nimport { useNavigate } from "react-router";\nimport { Button } from "./ui/button";\nimport { Skeleton } from "./ui/skeleton";\nimport { Link } from "react-router";\n\nexport default function UserMenu() {\n  const navigate = useNavigate();\n  const { data: session, isPending } = authClient.useSession();\n\n  if (isPending) {\n    return <Skeleton className="h-9 w-24" />;\n  }\n\n  if (!session) {\n    return (\n      <Button variant="outline" asChild>\n        <Link to="/login">Sign In</Link>\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant="outline">{session.user.name}</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className="bg-card">\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>{session.user.email}</DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Button\n            variant="destructive"\n            className="w-full"\n            onClick={() => {\n              authClient.signOut({\n                fetchOptions: {\n                  onSuccess: () => {\n                    navigate("/");\n                  },\n                },\n              });\n            }}\n          >\n            Sign Out\n          </Button>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/react-router/src/routes/dashboard.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "89b645f778",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { trpc } from "@/utils/trpc";\n{{/if}}\nimport { useQuery } from "@tanstack/react-query";\nimport { useEffect } from "react";\nimport { useNavigate } from "react-router";\n\nexport default function Dashboard() {\n  const { data: session, isPending } = authClient.useSession();\n  const navigate = useNavigate();\n\n  {{#if (eq api "orpc")}}\n  const privateData = useQuery(orpc.privateData.queryOptions());\n  {{/if}}\n  {{#if (eq api "trpc")}}\n  const privateData = useQuery(trpc.privateData.queryOptions());\n  {{/if}}\n\n  useEffect(() => {\n    if (!session && !isPending) {\n      navigate("/login");\n    }\n  }, [session, isPending]);\n\n  if (isPending) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <p>Welcome {session?.user.name}</p>\n      <p>privateData: {privateData.data?.message}</p>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/react-router/src/routes/login.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "363d5a97fa",
        },
        content: `import SignInForm from "@/components/sign-in-form";\nimport SignUpForm from "@/components/sign-up-form";\nimport { useState } from "react";\n\nexport default function Login() {\n  const [showSignIn, setShowSignIn] = useState(false);\n\n  return showSignIn ? (\n    <SignInForm onSwitchToSignUp={() => setShowSignIn(false)} />\n  ) : (\n    <SignUpForm onSwitchToSignIn={() => setShowSignIn(true)} />\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-router/src/components/sign-in-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "e1a9d1f7c1",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { useNavigate } from "@tanstack/react-router";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\n\nexport default function SignInForm({\n	onSwitchToSignUp,\n}: {\n	onSwitchToSignUp: () => void;\n}) {\n	const navigate = useNavigate({\n		from: "/",\n	});\n	const { isPending } = authClient.useSession();\n\n	const form = useForm({\n		defaultValues: {\n			email: "",\n			password: "",\n		},\n		onSubmit: async ({ value }) => {\n			await authClient.signIn.email(\n				{\n					email: value.email,\n					password: value.password,\n				},\n				{\n					onSuccess: () => {\n						navigate({\n							to: "/dashboard",\n						});\n						toast.success("Sign in successful");\n					},\n					onError: (error) => {\n						toast.error(error.error.message);\n					},\n				},\n			);\n		},\n		validators: {\n			onSubmit: z.object({\n				email: z.email("Invalid email address"),\n				password: z.string().min(8, "Password must be at least 8 characters"),\n			}),\n		},\n	});\n\n	if (isPending) {\n		return <Loader />;\n	}\n\n	return (\n		<div className="mx-auto w-full mt-10 max-w-md p-6">\n			<h1 className="mb-6 text-center text-3xl font-bold">Welcome Back</h1>\n\n			<form\n				onSubmit={(e) => {\n					e.preventDefault();\n					e.stopPropagation();\n					void form.handleSubmit();\n				}}\n				className="space-y-4"\n			>\n				<div>\n					<form.Field name="email">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Email</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="email"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<div>\n					<form.Field name="password">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Password</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="password"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<form.Subscribe>\n					{(state) => (\n						<Button\n							type="submit"\n							className="w-full"\n							disabled={!state.canSubmit || state.isSubmitting}\n						>\n							{state.isSubmitting ? "Submitting..." : "Sign In"}\n						</Button>\n					)}\n				</form.Subscribe>\n			</form>\n\n			<div className="mt-4 text-center">\n				<Button\n					variant="link"\n					onClick={onSwitchToSignUp}\n					className="text-indigo-600 hover:text-indigo-800"\n				>\n					Need an account? Sign Up\n				</Button>\n			</div>\n		</div>\n	);\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-router/src/components/sign-up-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "82991981ef",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { useNavigate } from "@tanstack/react-router";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\n\nexport default function SignUpForm({\n	onSwitchToSignIn,\n}: {\n	onSwitchToSignIn: () => void;\n}) {\n	const navigate = useNavigate({\n		from: "/",\n	});\n	const { isPending } = authClient.useSession();\n\n	const form = useForm({\n		defaultValues: {\n			email: "",\n			password: "",\n			name: "",\n		},\n		onSubmit: async ({ value }) => {\n			await authClient.signUp.email(\n				{\n					email: value.email,\n					password: value.password,\n					name: value.name,\n				},\n				{\n					onSuccess: () => {\n						navigate({\n							to: "/dashboard",\n						});\n						toast.success("Sign up successful");\n					},\n					onError: (error) => {\n						toast.error(error.error.message);\n					},\n				},\n			);\n		},\n		validators: {\n			onSubmit: z.object({\n				name: z.string().min(2, "Name must be at least 2 characters"),\n				email: z.email("Invalid email address"),\n				password: z.string().min(8, "Password must be at least 8 characters"),\n			}),\n		},\n	});\n\n	if (isPending) {\n		return <Loader />;\n	}\n\n	return (\n		<div className="mx-auto w-full mt-10 max-w-md p-6">\n			<h1 className="mb-6 text-center text-3xl font-bold">Create Account</h1>\n\n			<form\n				onSubmit={(e) => {\n					e.preventDefault();\n					e.stopPropagation();\n					void form.handleSubmit();\n				}}\n				className="space-y-4"\n			>\n				<div>\n					<form.Field name="name">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Name</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<div>\n					<form.Field name="email">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Email</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="email"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<div>\n					<form.Field name="password">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Password</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="password"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<form.Subscribe>\n					{(state) => (\n						<Button\n							type="submit"\n							className="w-full"\n							disabled={!state.canSubmit || state.isSubmitting}\n						>\n							{state.isSubmitting ? "Submitting..." : "Sign Up"}\n						</Button>\n					)}\n				</form.Subscribe>\n			</form>\n\n			<div className="mt-4 text-center">\n				<Button\n					variant="link"\n					onClick={onSwitchToSignIn}\n					className="text-indigo-600 hover:text-indigo-800"\n				>\n					Already have an account? Sign In\n				</Button>\n			</div>\n		</div>\n	);\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-router/src/components/user-menu.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "663a5f6c2d",
        },
        content: `import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { authClient } from "@/lib/auth-client";\nimport { useNavigate } from "@tanstack/react-router";\nimport { Button } from "./ui/button";\nimport { Skeleton } from "./ui/skeleton";\nimport { Link } from "@tanstack/react-router";\n\nexport default function UserMenu() {\n  const navigate = useNavigate();\n  const { data: session, isPending } = authClient.useSession();\n\n  if (isPending) {\n    return <Skeleton className="h-9 w-24" />;\n  }\n\n  if (!session) {\n    return (\n      <Button variant="outline" asChild>\n        <Link to="/login">Sign In</Link>\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant="outline">{session.user.name}</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className="bg-card">\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>{session.user.email}</DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Button\n            variant="destructive"\n            className="w-full"\n            onClick={() => {\n              authClient.signOut({\n                fetchOptions: {\n                  onSuccess: () => {\n                    navigate({\n                      to: "/",\n                    });\n                  },\n                },\n              });\n            }}\n          >\n            Sign Out\n          </Button>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-router/src/routes/dashboard.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "9caca31595",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { trpc } from "@/utils/trpc";\n{{/if}}\nimport { useQuery } from "@tanstack/react-query";\nimport { createFileRoute } from "@tanstack/react-router";\nimport { useEffect } from "react";\n\nexport const Route = createFileRoute("/dashboard")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const { data: session, isPending } = authClient.useSession();\n\n  const navigate = Route.useNavigate();\n\n  {{#if (eq api "orpc")}}\n  const privateData = useQuery(orpc.privateData.queryOptions());\n  {{/if}}\n  {{#if (eq api "trpc")}}\n  const privateData = useQuery(trpc.privateData.queryOptions());\n  {{/if}}\n\n  useEffect(() => {\n    if (!session && !isPending) {\n      navigate({\n        to: "/login",\n      });\n    }\n  }, [session, isPending]);\n\n  if (isPending) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <p>Welcome {session?.user.name}</p>\n      <p>privateData: {privateData.data?.message}</p>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-router/src/routes/login.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "dd3dd58a52",
        },
        content: `import SignInForm from "@/components/sign-in-form";\nimport SignUpForm from "@/components/sign-up-form";\nimport { createFileRoute } from "@tanstack/react-router";\nimport { useState } from "react";\n\nexport const Route = createFileRoute("/login")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const [showSignIn, setShowSignIn] = useState(false);\n\n  return showSignIn ? (\n    <SignInForm onSwitchToSignUp={() => setShowSignIn(false)} />\n  ) : (\n    <SignUpForm onSwitchToSignIn={() => setShowSignIn(true)} />\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-start/src/components/sign-in-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "e1a9d1f7c1",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { useNavigate } from "@tanstack/react-router";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\n\nexport default function SignInForm({\n	onSwitchToSignUp,\n}: {\n	onSwitchToSignUp: () => void;\n}) {\n	const navigate = useNavigate({\n		from: "/",\n	});\n	const { isPending } = authClient.useSession();\n\n	const form = useForm({\n		defaultValues: {\n			email: "",\n			password: "",\n		},\n		onSubmit: async ({ value }) => {\n			await authClient.signIn.email(\n				{\n					email: value.email,\n					password: value.password,\n				},\n				{\n					onSuccess: () => {\n						navigate({\n							to: "/dashboard",\n						});\n						toast.success("Sign in successful");\n					},\n					onError: (error) => {\n						toast.error(error.error.message);\n					},\n				},\n			);\n		},\n		validators: {\n			onSubmit: z.object({\n				email: z.email("Invalid email address"),\n				password: z.string().min(8, "Password must be at least 8 characters"),\n			}),\n		},\n	});\n\n	if (isPending) {\n		return <Loader />;\n	}\n\n	return (\n		<div className="mx-auto w-full mt-10 max-w-md p-6">\n			<h1 className="mb-6 text-center text-3xl font-bold">Welcome Back</h1>\n\n			<form\n				onSubmit={(e) => {\n					e.preventDefault();\n					e.stopPropagation();\n					void form.handleSubmit();\n				}}\n				className="space-y-4"\n			>\n				<div>\n					<form.Field name="email">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Email</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="email"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<div>\n					<form.Field name="password">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Password</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="password"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<form.Subscribe>\n					{(state) => (\n						<Button\n							type="submit"\n							className="w-full"\n							disabled={!state.canSubmit || state.isSubmitting}\n						>\n							{state.isSubmitting ? "Submitting..." : "Sign In"}\n						</Button>\n					)}\n				</form.Subscribe>\n			</form>\n\n			<div className="mt-4 text-center">\n				<Button\n					variant="link"\n					onClick={onSwitchToSignUp}\n					className="text-indigo-600 hover:text-indigo-800"\n				>\n					Need an account? Sign Up\n				</Button>\n			</div>\n		</div>\n	);\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-start/src/components/sign-up-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "82991981ef",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useForm } from "@tanstack/react-form";\nimport { useNavigate } from "@tanstack/react-router";\nimport { toast } from "sonner";\nimport z from "zod/v4";\nimport Loader from "./loader";\nimport { Button } from "./ui/button";\nimport { Input } from "./ui/input";\nimport { Label } from "./ui/label";\n\nexport default function SignUpForm({\n	onSwitchToSignIn,\n}: {\n	onSwitchToSignIn: () => void;\n}) {\n	const navigate = useNavigate({\n		from: "/",\n	});\n	const { isPending } = authClient.useSession();\n\n	const form = useForm({\n		defaultValues: {\n			email: "",\n			password: "",\n			name: "",\n		},\n		onSubmit: async ({ value }) => {\n			await authClient.signUp.email(\n				{\n					email: value.email,\n					password: value.password,\n					name: value.name,\n				},\n				{\n					onSuccess: () => {\n						navigate({\n							to: "/dashboard",\n						});\n						toast.success("Sign up successful");\n					},\n					onError: (error) => {\n						toast.error(error.error.message);\n					},\n				},\n			);\n		},\n		validators: {\n			onSubmit: z.object({\n				name: z.string().min(2, "Name must be at least 2 characters"),\n				email: z.email("Invalid email address"),\n				password: z.string().min(8, "Password must be at least 8 characters"),\n			}),\n		},\n	});\n\n	if (isPending) {\n		return <Loader />;\n	}\n\n	return (\n		<div className="mx-auto w-full mt-10 max-w-md p-6">\n			<h1 className="mb-6 text-center text-3xl font-bold">Create Account</h1>\n\n			<form\n				onSubmit={(e) => {\n					e.preventDefault();\n					e.stopPropagation();\n					void form.handleSubmit();\n				}}\n				className="space-y-4"\n			>\n				<div>\n					<form.Field name="name">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Name</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<div>\n					<form.Field name="email">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Email</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="email"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<div>\n					<form.Field name="password">\n						{(field) => (\n							<div className="space-y-2">\n								<Label htmlFor={field.name}>Password</Label>\n								<Input\n									id={field.name}\n									name={field.name}\n									type="password"\n									value={field.state.value}\n									onBlur={field.handleBlur}\n									onChange={(e) => field.handleChange(e.target.value)}\n								/>\n								{field.state.meta.errors.map((error) => (\n									<p key={error?.message} className="text-red-500">\n										{error?.message}\n									</p>\n								))}\n							</div>\n						)}\n					</form.Field>\n				</div>\n\n				<form.Subscribe>\n					{(state) => (\n						<Button\n							type="submit"\n							className="w-full"\n							disabled={!state.canSubmit || state.isSubmitting}\n						>\n							{state.isSubmitting ? "Submitting..." : "Sign Up"}\n						</Button>\n					)}\n				</form.Subscribe>\n			</form>\n\n			<div className="mt-4 text-center">\n				<Button\n					variant="link"\n					onClick={onSwitchToSignIn}\n					className="text-indigo-600 hover:text-indigo-800"\n				>\n					Already have an account? Sign In\n				</Button>\n			</div>\n		</div>\n	);\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-start/src/components/user-menu.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "663a5f6c2d",
        },
        content: `import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { authClient } from "@/lib/auth-client";\nimport { useNavigate } from "@tanstack/react-router";\nimport { Button } from "./ui/button";\nimport { Skeleton } from "./ui/skeleton";\nimport { Link } from "@tanstack/react-router";\n\nexport default function UserMenu() {\n  const navigate = useNavigate();\n  const { data: session, isPending } = authClient.useSession();\n\n  if (isPending) {\n    return <Skeleton className="h-9 w-24" />;\n  }\n\n  if (!session) {\n    return (\n      <Button variant="outline" asChild>\n        <Link to="/login">Sign In</Link>\n      </Button>\n    );\n  }\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant="outline">{session.user.name}</Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className="bg-card">\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>{session.user.email}</DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Button\n            variant="destructive"\n            className="w-full"\n            onClick={() => {\n              authClient.signOut({\n                fetchOptions: {\n                  onSuccess: () => {\n                    navigate({\n                      to: "/",\n                    });\n                  },\n                },\n              });\n            }}\n          >\n            Sign Out\n          </Button>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-start/src/routes/dashboard.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "a6b26c2e3b",
        },
        content: `import { authClient } from "@/lib/auth-client";\n{{#if (eq api "trpc")}}\nimport { useTRPC } from "@/utils/trpc";\n{{/if}}\n{{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n{{/if}}\nimport { useQuery } from "@tanstack/react-query";\nimport { createFileRoute } from "@tanstack/react-router";\nimport { useEffect } from "react";\n\nexport const Route = createFileRoute("/dashboard")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const navigate = Route.useNavigate();\n  {{#if (eq api "trpc")}}\n  const trpc = useTRPC();\n  {{/if}}\n  {{#if (eq api "orpc")}}\n  {{/if}}\n  const { data: session, isPending } = authClient.useSession();\n\n  {{#if (eq api "trpc")}}\n  const privateData = useQuery(trpc.privateData.queryOptions());\n  {{/if}}\n  {{#if (eq api "orpc")}}\n  const privateData = useQuery(orpc.privateData.queryOptions());\n  {{/if}}\n\n  useEffect(() => {\n    if (!session && !isPending) {\n      navigate({\n        to: "/login",\n      });\n    }\n  }, [session, isPending]);\n\n  if (isPending) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Dashboard</h1>\n      <p>Welcome {session?.user.name}</p>\n      <p>privateData: {privateData.data?.message}</p>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/react/tanstack-start/src/routes/login.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "dd3dd58a52",
        },
        content: `import SignInForm from "@/components/sign-in-form";\nimport SignUpForm from "@/components/sign-up-form";\nimport { createFileRoute } from "@tanstack/react-router";\nimport { useState } from "react";\n\nexport const Route = createFileRoute("/login")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const [showSignIn, setShowSignIn] = useState(false);\n\n  return showSignIn ? (\n    <SignInForm onSwitchToSignUp={() => setShowSignIn(false)} />\n  ) : (\n    <SignUpForm onSwitchToSignIn={() => setShowSignIn(true)} />\n  );\n}\n`,
        type: "text",
      },
      "auth/web/solid/src/components/sign-in-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "d17ce7852d",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { createForm } from "@tanstack/solid-form";\nimport { useNavigate } from "@tanstack/solid-router";\nimport z from "zod/v4";\nimport { For } from "solid-js";\n\nexport default function SignInForm({\n  onSwitchToSignUp,\n}: {\n  onSwitchToSignUp: () => void;\n}) {\n  const navigate = useNavigate({\n    from: "/",\n  });\n\n  const form = createForm(() => ({\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n    onSubmit: async ({ value }) => {\n      await authClient.signIn.email(\n        {\n          email: value.email,\n          password: value.password,\n        },\n        {\n          onSuccess: () => {\n            navigate({\n              to: "/dashboard",\n            });\n            console.log("Sign in successful");\n          },\n          onError: (error) => {\n            console.error(error.error.message);\n          },\n        },\n      );\n    },\n    validators: {\n      onSubmit: z.object({\n        email: z.email("Invalid email address"),\n        password: z.string().min(8, "Password must be at least 8 characters"),\n      }),\n    },\n  }));\n\n  return (\n    <div class="mx-auto w-full mt-10 max-w-md p-6">\n      <h1 class="mb-6 text-center text-3xl font-bold">Welcome Back</h1>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          void form.handleSubmit();\n        }}\n        class="space-y-4"\n      >\n        <div>\n          <form.Field name="email">\n            {(field) => (\n              <div class="space-y-2">\n                <label for={field().name}>Email</label>\n                <input\n                  id={field().name}\n                  name={field().name}\n                  type="email"\n                  value={field().state.value}\n                  onBlur={field().handleBlur}\n                  onInput={(e) => field().handleChange(e.currentTarget.value)}\n                  class="w-full rounded border p-2"\n                />\n                <For each={field().state.meta.errors}>\n                  {(error) => (\n                    <p class="text-sm text-red-600">{error?.message}</p>\n                  )}\n                </For>\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="password">\n            {(field) => (\n              <div class="space-y-2">\n                <label for={field().name}>Password</label>\n                <input\n                  id={field().name}\n                  name={field().name}\n                  type="password"\n                  value={field().state.value}\n                  onBlur={field().handleBlur}\n                  onInput={(e) => field().handleChange(e.currentTarget.value)}\n                  class="w-full rounded border p-2"\n                />\n                <For each={field().state.meta.errors}>\n                  {(error) => (\n                    <p class="text-sm text-red-600">{error?.message}</p>\n                  )}\n                </For>\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <form.Subscribe>\n          {(state) => (\n            <button\n              type="submit"\n              class="w-full rounded bg-indigo-600 p-2 text-white hover:bg-indigo-700 disabled:opacity-50"\n              disabled={!state().canSubmit || state().isSubmitting}\n            >\n              {state().isSubmitting ? "Submitting..." : "Sign In"}\n            </button>\n          )}\n        </form.Subscribe>\n      </form>\n\n      <div class="mt-4 text-center">\n        <button\n          type="button"\n          onClick={onSwitchToSignUp}\n          class="text-sm text-indigo-600 hover:text-indigo-800 hover:underline"\n        >\n          Need an account? Sign Up\n        </button>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/solid/src/components/sign-up-form.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "4ecf34f9ef",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { createForm } from "@tanstack/solid-form";\nimport { useNavigate } from "@tanstack/solid-router";\nimport z from "zod/v4";\nimport { For } from "solid-js";\n\nexport default function SignUpForm({\n  onSwitchToSignIn,\n}: {\n  onSwitchToSignIn: () => void;\n}) {\n  const navigate = useNavigate({\n    from: "/",\n  });\n\n  const form = createForm(() => ({\n    defaultValues: {\n      email: "",\n      password: "",\n      name: "",\n    },\n    onSubmit: async ({ value }) => {\n      await authClient.signUp.email(\n        {\n          email: value.email,\n          password: value.password,\n          name: value.name,\n        },\n        {\n          onSuccess: () => {\n            navigate({\n              to: "/dashboard",\n            });\n            console.log("Sign up successful");\n          },\n          onError: (error) => {\n            console.error(error.error.message);\n          },\n        },\n      );\n    },\n    validators: {\n      onSubmit: z.object({\n        name: z.string().min(2, "Name must be at least 2 characters"),\n        email: z.email("Invalid email address"),\n        password: z.string().min(8, "Password must be at least 8 characters"),\n      }),\n    },\n  }));\n\n  return (\n    <div class="mx-auto w-full mt-10 max-w-md p-6">\n      <h1 class="mb-6 text-center text-3xl font-bold">Create Account</h1>\n\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          void form.handleSubmit();\n        }}\n        class="space-y-4"\n      >\n        <div>\n          <form.Field name="name">\n            {(field) => (\n              <div class="space-y-2">\n                <label for={field().name}>Name</label>\n                <input\n                  id={field().name}\n                  name={field().name}\n                  value={field().state.value}\n                  onBlur={field().handleBlur}\n                  onInput={(e) => field().handleChange(e.currentTarget.value)}\n                  class="w-full rounded border p-2"\n                />\n                <For each={field().state.meta.errors}>\n                  {(error) => (\n                    <p class="text-sm text-red-600">{error?.message}</p>\n                  )}\n                </For>\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="email">\n            {(field) => (\n              <div class="space-y-2">\n                <label for={field().name}>Email</label>\n                <input\n                  id={field().name}\n                  name={field().name}\n                  type="email"\n                  value={field().state.value}\n                  onBlur={field().handleBlur}\n                  onInput={(e) => field().handleChange(e.currentTarget.value)}\n                  class="w-full rounded border p-2"\n                />\n                <For each={field().state.meta.errors}>\n                  {(error) => (\n                    <p class="text-sm text-red-600">{error?.message}</p>\n                  )}\n                </For>\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <div>\n          <form.Field name="password">\n            {(field) => (\n              <div class="space-y-2">\n                <label for={field().name}>Password</label>\n                <input\n                  id={field().name}\n                  name={field().name}\n                  type="password"\n                  value={field().state.value}\n                  onBlur={field().handleBlur}\n                  onInput={(e) => field().handleChange(e.currentTarget.value)}\n                  class="w-full rounded border p-2"\n                />\n                <For each={field().state.meta.errors}>\n                  {(error) => (\n                    <p class="text-sm text-red-600">{error?.message}</p>\n                  )}\n                </For>\n              </div>\n            )}\n          </form.Field>\n        </div>\n\n        <form.Subscribe>\n          {(state) => (\n            <button\n              type="submit"\n              class="w-full rounded bg-indigo-600 p-2 text-white hover:bg-indigo-700 disabled:opacity-50"\n              disabled={!state().canSubmit || state().isSubmitting}\n            >\n              {state().isSubmitting ? "Submitting..." : "Sign Up"}\n            </button>\n          )}\n        </form.Subscribe>\n      </form>\n\n      <div class="mt-4 text-center">\n        <button\n          type="button"\n          onClick={onSwitchToSignIn}\n          class="text-sm text-indigo-600 hover:text-indigo-800 hover:underline"\n        >\n          Already have an account? Sign In\n        </button>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/solid/src/components/user-menu.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "d2f89990d1",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { useNavigate, Link } from "@tanstack/solid-router";\nimport { createSignal, Show } from "solid-js";\n\nexport default function UserMenu() {\n  const navigate = useNavigate();\n  const session = authClient.useSession();\n  const [isMenuOpen, setIsMenuOpen] = createSignal(false);\n\n  return (\n    <div class="relative inline-block text-left">\n      <Show when={session().isPending}>\n        <div class="h-9 w-24 animate-pulse rounded" />\n      </Show>\n\n      <Show when={!session().isPending && !session().data}>\n        <Link to="/login" class="inline-block border rounded px-4  text-sm">\n          Sign In\n        </Link>\n      </Show>\n\n      <Show when={!session().isPending && session().data}>\n        <button\n          type="button"\n          class="inline-block border rounded px-4  text-sm"\n          onClick={() => setIsMenuOpen(!isMenuOpen())}\n        >\n          {session().data?.user.name}\n        </button>\n\n        <Show when={isMenuOpen()}>\n          <div class="absolute right-0 mt-2 w-56 rounded p-1 shadow-sm">\n            <div class="px-4  text-sm">{session().data?.user.email}</div>\n            <button\n              class="mt-1 w-full border rounded px-4  text-center text-sm"\n              onClick={() => {\n                setIsMenuOpen(false);\n                authClient.signOut({\n                  fetchOptions: {\n                    onSuccess: () => {\n                      navigate({ to: "/" });\n                    },\n                  },\n                });\n              }}\n            >\n              Sign Out\n            </button>\n          </div>\n        </Show>\n      </Show>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/solid/src/lib/auth-client.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "5e30f07c48",
        },
        content: `import { createAuthClient } from "better-auth/solid";\n\nexport const authClient = createAuthClient({\n  baseURL: import.meta.env.VITE_SERVER_URL,\n});\n`,
        type: "text",
      },
      "auth/web/solid/src/routes/dashboard.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "1c1c83f823",
        },
        content: `import { authClient } from "@/lib/auth-client";\nimport { orpc } from "@/utils/orpc";\nimport { useQuery } from "@tanstack/solid-query";\nimport { createFileRoute } from "@tanstack/solid-router";\nimport { createEffect, Show } from "solid-js";\n\nexport const Route = createFileRoute("/dashboard")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const session = authClient.useSession();\n  const navigate = Route.useNavigate();\n\n  const privateData = useQuery(() => orpc.privateData.queryOptions());\n\n  createEffect(() => {\n    if (!session().data && !session().isPending) {\n      navigate({\n        to: "/login",\n      });\n    }\n  });\n\n  return (\n    <div>\n      <Show when={session().isPending}>\n        <div>Loading...</div>\n      </Show>\n\n      <Show when={!session().isPending && session().data}>\n        <h1>Dashboard</h1>\n        <p>Welcome {session().data?.user.name}</p>\n        <p>privateData: {privateData.data?.message}</p>\n      </Show>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/solid/src/routes/login.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "519b617d37",
        },
        content: `import SignInForm from "@/components/sign-in-form";\nimport SignUpForm from "@/components/sign-up-form";\nimport { createFileRoute } from "@tanstack/solid-router";\nimport { createSignal, Match, Switch } from "solid-js";\n\nexport const Route = createFileRoute("/login")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const [showSignIn, setShowSignIn] = createSignal(false);\n\n  return (\n    <Switch>\n      <Match when={showSignIn()}>\n        <SignInForm onSwitchToSignUp={() => setShowSignIn(false)} />\n      </Match>\n      <Match when={!showSignIn()}>\n        <SignUpForm onSwitchToSignIn={() => setShowSignIn(true)} />\n      </Match>\n    </Switch>\n  );\n}\n`,
        type: "text",
      },
      "auth/web/svelte/src/components/SignInForm.svelte": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "fd1702a9d0",
        },
        content: `<script lang="ts">\n	import { createForm } from '@tanstack/svelte-form';\n	import z from 'zod/v4';\n	import { authClient } from '$lib/auth-client';\n	import { goto } from '$app/navigation';\n\n	let { switchToSignUp } = $props<{ switchToSignUp: () => void }>();\n\n	const validationSchema = z.object({\n		email: z.email('Invalid email address'),\n		password: z.string().min(1, 'Password is required'),\n	});\n\n	const form = createForm(() => ({\n		defaultValues: { email: '', password: '' },\n		onSubmit: async ({ value }) => {\n				await authClient.signIn.email(\n					{ email: value.email, password: value.password },\n					{\n						onSuccess: () => goto('/dashboard'),\n						onError: (error) => {\n							console.log(error.error.message || 'Sign in failed. Please try again.');\n						},\n					}\n				);\n\n		},\n		validators: {\n			onSubmit: validationSchema,\n		},\n	}));\n</script>\n\n<div class="mx-auto mt-10 w-full max-w-md p-6">\n	<h1 class="mb-6 text-center font-bold text-3xl">Welcome Back</h1>\n\n	<form\n		class="space-y-4"\n		onsubmit={(e) => {\n			e.preventDefault();\n			e.stopPropagation();\n			form.handleSubmit();\n		}}\n	>\n		<form.Field name="email">\n			{#snippet children(field)}\n				<div class="space-y-1">\n					<label for={field.name}>Email</label>\n					<input\n						id={field.name}\n						name={field.name}\n						type="email"\n						class="w-full border"\n						onblur={field.handleBlur}\n						value={field.state.value}\n        oninput={(e: Event) => {\n            const target = e.target as HTMLInputElement\n            field.handleChange(target.value)\n          }}					/>\n					{#if field.state.meta.isTouched}\n						{#each field.state.meta.errors as error}\n							<p class="text-sm text-red-500" role="alert">{error}</p>\n						{/each}\n					{/if}\n				</div>\n			{/snippet}\n		</form.Field>\n\n		<form.Field name="password">\n			{#snippet children(field)}\n				<div class="space-y-1">\n					<label for={field.name}>Password</label>\n					<input\n						id={field.name}\n						name={field.name}\n						type="password"\n						class="w-full border"\n						onblur={field.handleBlur}\n					 value={field.state.value}\n      oninput={(e: Event) => {\n            const target = e.target as HTMLInputElement\n            field.handleChange(target.value)\n          }}\n					/>\n					{#if field.state.meta.isTouched}\n						{#each field.state.meta.errors as error}\n							<p class="text-sm text-red-500" role="alert">{error}</p>\n						{/each}\n					{/if}\n				</div>\n			{/snippet}\n		</form.Field>\n\n		<form.Subscribe selector={(state) => ({ canSubmit: state.canSubmit, isSubmitting: state.isSubmitting })}>\n			{#snippet children(state)}\n				<button type="submit" class="w-full" disabled={!state.canSubmit || state.isSubmitting}>\n					{state.isSubmitting ? 'Submitting...' : 'Sign In'}\n				</button>\n			{/snippet}\n		</form.Subscribe>\n	</form>\n\n	<div class="mt-4 text-center">\n		<button type="button" class="text-indigo-600 hover:text-indigo-800" onclick={switchToSignUp}>\n			Need an account? Sign Up\n		</button>\n	</div>\n</div>\n`,
        type: "text",
      },
      "auth/web/svelte/src/components/SignUpForm.svelte": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "e8283c1b3b",
        },
        content: `<script lang="ts">\n	import { createForm } from '@tanstack/svelte-form';\n	import z from 'zod/v4';\n	import { authClient } from '$lib/auth-client';\n	import { goto } from '$app/navigation';\n\n	let { switchToSignIn } = $props<{ switchToSignIn: () => void }>();\n\n	const validationSchema = z.object({\n		name: z.string().min(2, 'Name must be at least 2 characters'),\n		email: z.email('Invalid email address'),\n		password: z.string().min(8, 'Password must be at least 8 characters'),\n	});\n\n\n	const form = createForm(() => ({\n		defaultValues: { name: '', email: '', password: '' },\n		onSubmit: async ({ value }) => {\n				await authClient.signUp.email(\n					{\n						email: value.email,\n						password: value.password,\n						name: value.name,\n					},\n					{\n						onSuccess: () => {\n							goto('/dashboard');\n						},\n						onError: (error) => {\n							console.log(error.error.message || 'Sign up failed. Please try again.');\n						},\n					}\n				);\n\n		},\n		validators: {\n			onSubmit: validationSchema,\n		},\n	}));\n</script>\n\n<div class="mx-auto mt-10 w-full max-w-md p-6">\n	<h1 class="mb-6 text-center font-bold text-3xl">Create Account</h1>\n\n	<form\n		id="form"\n		class="space-y-4"\n		onsubmit={(e) => {\n			e.preventDefault();\n			e.stopPropagation();\n			form.handleSubmit();\n		}}\n	>\n		<form.Field name="name">\n			{#snippet children(field)}\n				<div class="space-y-1">\n					<label for={field.name}>Name</label>\n					<input\n						id={field.name}\n						name={field.name}\n						class="w-full border"\n						onblur={field.handleBlur}\n					 value={field.state.value}\n      oninput={(e: Event) => {\n            const target = e.target as HTMLInputElement\n            field.handleChange(target.value)\n          }}\n					/>\n					{#if field.state.meta.isTouched}\n						{#each field.state.meta.errors as error}\n							<p class="text-sm text-red-500" role="alert">{error}</p>\n						{/each}\n					{/if}\n				</div>\n			{/snippet}\n		</form.Field>\n\n		<form.Field name="email">\n			{#snippet children(field)}\n				<div class="space-y-1">\n					<label for={field.name}>Email</label>\n					<input\n						id={field.name}\n						name={field.name}\n						type="email"\n						class="w-full border"\n						onblur={field.handleBlur}\n      value={field.state.value}\n      oninput={(e: Event) => {\n            const target = e.target as HTMLInputElement\n            field.handleChange(target.value)\n          }}\n					/>\n					{#if field.state.meta.isTouched}\n						{#each field.state.meta.errors as error}\n							<p class="text-sm text-red-500" role="alert">{error}</p>\n						{/each}\n					{/if}\n				</div>\n			{/snippet}\n		</form.Field>\n\n		<form.Field name="password">\n			{#snippet children(field)}\n				<div class="space-y-1">\n					<label for={field.name}>Password</label>\n					<input\n						id={field.name}\n						name={field.name}\n						type="password"\n						class="w-full border"\n						onblur={field.handleBlur}\n					 value={field.state.value}\n      oninput={(e: Event) => {\n            const target = e.target as HTMLInputElement\n            field.handleChange(target.value)\n          }}\n					/>\n					{#if field.state.meta.errors}\n						{#each field.state.meta.errors as error}\n							<p class="text-sm text-red-500" role="alert">{error}</p>\n						{/each}\n					{/if}\n				</div>\n			{/snippet}\n		</form.Field>\n\n		<form.Subscribe selector={(state) => ({ canSubmit: state.canSubmit, isSubmitting: state.isSubmitting })}>\n			{#snippet children(state)}\n				<button type="submit" class="w-full" disabled={!state.canSubmit || state.isSubmitting}>\n					{state.isSubmitting ? 'Submitting...' : 'Sign Up'}\n				</button>\n			{/snippet}\n		</form.Subscribe>\n	</form>\n\n	<div class="mt-4 text-center">\n		<button type="button" class="text-indigo-600 hover:text-indigo-800" onclick={switchToSignIn}>\n			Already have an account? Sign In\n		</button>\n	</div>\n</div>\n`,
        type: "text",
      },
      "auth/web/svelte/src/components/UserMenu.svelte": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "32a1d6548d",
        },
        content: `<script lang="ts">\n	import { authClient } from '$lib/auth-client';\n	import { goto } from '$app/navigation';\n	import { queryClient } from '$lib/orpc';\n\n	const sessionQuery = authClient.useSession();\n\n	async function handleSignOut() {\n		await authClient.signOut({\n		fetchOptions: {\n			onSuccess: () => {\n				queryClient.invalidateQueries();\n				goto('/');\n			},\n			onError: (error) => {\n				console.error('Sign out failed:', error);\n			}\n		}\n		});\n	}\n\n	function goToLogin() {\n		goto('/login');\n	}\n\n</script>\n\n<div class="relative">\n	{#if $sessionQuery.isPending}\n		<div class="h-8 w-24 animate-pulse rounded bg-neutral-700"></div>\n	{:else if $sessionQuery.data?.user}\n		{@const user = $sessionQuery.data.user}\n		<div class="flex items-center gap-3">\n			<span class="text-sm text-neutral-300 hidden sm:inline" title={user.email}>\n				{user.name || user.email?.split('@')[0] || 'User'}\n			</span>\n			<button\n				onclick={handleSignOut}\n				class="rounded px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white transition-colors"\n			>\n				Sign Out\n			</button>\n		</div>\n	{:else}\n		<div class="flex items-center gap-2">\n			<button\n				onclick={goToLogin}\n				class="rounded px-3 py-1 text-sm bg-indigo-600 hover:bg-indigo-700 text-white transition-colors"\n			>\n				Sign In\n			</button>\n		</div>\n	{/if}\n</div>\n`,
        type: "text",
      },
      "auth/web/svelte/src/lib/auth-client.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "53a67137c9",
        },
        content: `import { PUBLIC_SERVER_URL } from "$env/static/public";\nimport { createAuthClient } from "better-auth/svelte";\n\nexport const authClient = createAuthClient({\n	baseURL: PUBLIC_SERVER_URL,\n});\n`,
        type: "text",
      },
      "auth/web/svelte/src/routes/dashboard/+page.svelte": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "6b3d81f7af",
        },
        content: `<script lang="ts">\n	import { onMount } from 'svelte';\n	import { goto } from '$app/navigation';\n	import { authClient } from '$lib/auth-client';\n	import { orpc } from '$lib/orpc';\n	import { createQuery } from '@tanstack/svelte-query';\n	import { get } from 'svelte/store';\n\n	const sessionQuery = authClient.useSession();\n\n	const privateDataQuery = createQuery(orpc.privateData.queryOptions());\n\n	onMount(() => {\n		const { data: session, isPending } = get(sessionQuery);\n		if (!session && !isPending) {\n			goto('/login');\n		}\n	});\n</script>\n\n{#if $sessionQuery.isPending}\n	<div>Loading...</div>\n{:else if !$sessionQuery.data}\n	<!-- Redirecting... -->\n{:else}\n	<div>\n		<h1>Dashboard</h1>\n		<p>Welcome {$sessionQuery.data.user.name}</p>\n		<p>privateData: {$privateDataQuery.data?.message}</p>\n	</div>\n{/if}\n`,
        type: "text",
      },
      "auth/web/svelte/src/routes/login/+page.svelte": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "30212236e8",
        },
        content: `<script lang="ts">\n	import SignInForm from '../../components/SignInForm.svelte';\n	import SignUpForm from '../../components/SignUpForm.svelte';\n\n	let showSignIn = $state(true);\n</script>\n\n{#if showSignIn}\n	<SignInForm switchToSignUp={() => showSignIn = false} />\n{:else}\n	<SignUpForm switchToSignIn={() => showSignIn = true} />\n{/if}\n`,
        type: "text",
      },
    },
  },
};
