import type { Template } from "~/providers/better-t-stack/better-t-stack-types.ts";

export const DLER_TPL_EXAMPLES: Template = {
  name: "examples",
  description: "Template generated from 31 files",
  updatedAt: "2025-06-17T20:33:59.686Z",
  config: {
    files: {
      "examples/ai/native/nativewind/app/(drawer)/ai.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "cc30ba62a9",
        },
        content: `import { useRef, useEffect } from "react";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  KeyboardAvoidingView,\n  Platform,\n} from "react-native";\nimport { useChat } from "@ai-sdk/react";\nimport { fetch as expoFetch } from "expo/fetch";\nimport { Ionicons } from "@expo/vector-icons";\nimport { Container } from "@/components/container";\n\n// Utility function to generate API URLs\nconst generateAPIUrl = (relativePath: string) => {\n  const serverUrl = process.env.EXPO_PUBLIC_SERVER_URL;\n  if (!serverUrl) {\n    throw new Error("EXPO_PUBLIC_SERVER_URL environment variable is not defined");\n  }\n  \n  const path = relativePath.startsWith('/') ? relativePath : \`/\${relativePath}\`;\n  return serverUrl.concat(path);\n};\n\nexport default function AIScreen() {\n  const { messages, input, handleInputChange, handleSubmit, error } = useChat({\n    fetch: expoFetch as unknown as typeof globalThis.fetch,\n    api: generateAPIUrl('/ai'),\n    onError: error => console.error(error, 'AI Chat Error'),\n    maxSteps: 5,\n  });\n\n  const scrollViewRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    scrollViewRef.current?.scrollToEnd({ animated: true });\n  }, [messages]);\n\n  const onSubmit = () => {\n    if (input.trim()) {\n      handleSubmit();\n    }\n  };\n\n  if (error) {\n    return (\n      <Container>\n        <View className="flex-1 justify-center items-center px-4">\n          <Text className="text-destructive text-center text-lg mb-4">\n            Error: {error.message}\n          </Text>\n          <Text className="text-muted-foreground text-center">\n            Please check your connection and try again.\n          </Text>\n        </View>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <KeyboardAvoidingView \n        className="flex-1"\n        behavior={Platform.OS === "ios" ? "padding" : "height"}\n      >\n        <View className="flex-1 px-4 py-6">\n          <View className="mb-6">\n            <Text className="text-foreground text-2xl font-bold mb-2">\n              AI Chat\n            </Text>\n            <Text className="text-muted-foreground">\n              Chat with our AI assistant\n            </Text>\n          </View>\n\n          <ScrollView\n            ref={scrollViewRef}\n            className="flex-1 mb-4"\n            showsVerticalScrollIndicator={false}\n          >\n            {messages.length === 0 ? (\n              <View className="flex-1 justify-center items-center">\n                <Text className="text-center text-muted-foreground text-lg">\n                  Ask me anything to get started!\n                </Text>\n              </View>\n            ) : (\n              <View className="space-y-4">\n                {messages.map((message) => (\n                  <View\n                    key={message.id}\n                    className={\`p-3 rounded-lg \${\n                      message.role === "user"\n                        ? "bg-primary/10 ml-8"\n                        : "bg-card mr-8 border border-border"\n                    }\`}\n                  >\n                    <Text className="text-sm font-semibold mb-1 text-foreground">\n                      {message.role === "user" ? "You" : "AI Assistant"}\n                    </Text>\n                    <Text className="text-foreground leading-relaxed">\n                      {message.content}\n                    </Text>\n                  </View>\n                ))}\n              </View>\n            )}\n          </ScrollView>\n\n          <View className="border-t border-border pt-4">\n            <View className="flex-row items-end space-x-2">\n              <TextInput\n                value={input}\n                onChange={(e) =>\n                  handleInputChange({\n                    ...e,\n                    target: {\n                      ...e.target,\n                      value: e.nativeEvent.text,\n                    },\n                  } as unknown as React.ChangeEvent<HTMLInputElement>)\n                }\n                placeholder="Type your message..."\n                placeholderTextColor="#6b7280"\n                className="flex-1 border border-border rounded-md px-3 py-2 text-foreground bg-background min-h-[40px] max-h-[120px]"\n                onSubmitEditing={(e) => {\n                  handleSubmit(e);\n                  e.preventDefault();\n                }}\n                autoFocus={true}\n              />\n              <TouchableOpacity\n                onPress={onSubmit}\n                disabled={!input.trim()}\n                className={\`p-2 rounded-md \${\n                  input.trim() \n                    ? "bg-primary" \n                    : "bg-muted"\n                }\`}\n              >\n                <Ionicons\n                  name="send"\n                  size={20}\n                  color={input.trim() ? "#ffffff" : "#6b7280"}\n                />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </Container>\n  );\n} `,
        type: "text",
      },
      "examples/ai/native/nativewind/polyfills.js": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "9866d77e7e",
        },
        content: `import structuredClone from "@ungap/structured-clone";\nimport { Platform } from "react-native";\n\nif (Platform.OS !== "web") {\n  const setupPolyfills = async () => {\n    const { polyfillGlobal } = await import(\n      "react-native/Libraries/Utilities/PolyfillFunctions"\n    );\n\n    const { TextEncoderStream, TextDecoderStream } = await import(\n      "@stardazed/streams-text-encoding"\n    );\n\n    if (!("structuredClone" in global)) {\n      polyfillGlobal("structuredClone", () => structuredClone);\n    }\n\n    polyfillGlobal("TextEncoderStream", () => TextEncoderStream);\n    polyfillGlobal("TextDecoderStream", () => TextDecoderStream);\n  };\n\n  setupPolyfills();\n}\n\nexport {};\n`,
        type: "text",
      },
      "examples/ai/native/unistyles/app/(drawer)/ai.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "3eab7496a4",
        },
        content: `import { useRef, useEffect } from "react";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  KeyboardAvoidingView,\n  Platform,\n} from "react-native";\nimport { useChat } from "@ai-sdk/react";\nimport { fetch as expoFetch } from "expo/fetch";\nimport { Ionicons } from "@expo/vector-icons";\nimport { StyleSheet, useUnistyles } from "react-native-unistyles";\nimport { Container } from "@/components/container";\n\nconst generateAPIUrl = (relativePath: string) => {\n  const serverUrl = process.env.EXPO_PUBLIC_SERVER_URL;\n  if (!serverUrl) {\n    throw new Error(\n      "EXPO_PUBLIC_SERVER_URL environment variable is not defined",\n    );\n  }\n\n  const path = relativePath.startsWith("/") ? relativePath : \`/\${relativePath}\`;\n  return serverUrl.concat(path);\n};\n\nexport default function AIScreen() {\n  const { theme } = useUnistyles();\n  const { messages, input, handleInputChange, handleSubmit, error } = useChat({\n    fetch: expoFetch as unknown as typeof globalThis.fetch,\n    api: generateAPIUrl("/ai"),\n    onError: (error) => console.error(error, "AI Chat Error"),\n    maxSteps: 5,\n  });\n\n  const scrollViewRef = useRef<ScrollView>(null);\n\n  useEffect(() => {\n    scrollViewRef.current?.scrollToEnd({ animated: true });\n  }, [messages]);\n\n  const onSubmit = () => {\n    if (input.trim()) {\n      handleSubmit();\n    }\n  };\n\n  if (error) {\n    return (\n      <Container>\n        <View style={styles.errorContainer}>\n          <Text style={styles.errorText}>Error: {error.message}</Text>\n          <Text style={styles.errorSubtext}>\n            Please check your connection and try again.\n          </Text>\n        </View>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <KeyboardAvoidingView\n        style={styles.container}\n        behavior={Platform.OS === "ios" ? "padding" : "height"}\n      >\n        <View style={styles.content}>\n          <View style={styles.header}>\n            <Text style={styles.headerTitle}>AI Chat</Text>\n            <Text style={styles.headerSubtitle}>\n              Chat with our AI assistant\n            </Text>\n          </View>\n\n          <ScrollView\n            ref={scrollViewRef}\n            style={styles.messagesContainer}\n            showsVerticalScrollIndicator={false}\n          >\n            {messages.length === 0 ? (\n              <View style={styles.emptyContainer}>\n                <Text style={styles.emptyText}>\n                  Ask me anything to get started!\n                </Text>\n              </View>\n            ) : (\n              <View style={styles.messagesWrapper}>\n                {messages.map((message) => (\n                  <View\n                    key={message.id}\n                    style={[\n                      styles.messageContainer,\n                      message.role === "user"\n                        ? styles.userMessage\n                        : styles.assistantMessage,\n                    ]}\n                  >\n                    <Text style={styles.messageRole}>\n                      {message.role === "user" ? "You" : "AI Assistant"}\n                    </Text>\n                    <Text style={styles.messageContent}>{message.content}</Text>\n                  </View>\n                ))}\n              </View>\n            )}\n          </ScrollView>\n\n          <View style={styles.inputSection}>\n            <View style={styles.inputContainer}>\n              <TextInput\n                value={input}\n                onChange={(e) =>\n                  handleInputChange({\n                    ...e,\n                    target: {\n                      ...e.target,\n                      value: e.nativeEvent.text,\n                    },\n                  } as unknown as React.ChangeEvent<HTMLInputElement>)\n                }\n                placeholder="Type your message..."\n                placeholderTextColor={theme.colors.border}\n                style={styles.textInput}\n                onSubmitEditing={(e) => {\n                  handleSubmit(e);\n                  e.preventDefault();\n                }}\n                autoFocus={true}\n              />\n              <TouchableOpacity\n                onPress={onSubmit}\n                disabled={!input.trim()}\n                style={[\n                  styles.sendButton,\n                  !input.trim() && styles.sendButtonDisabled,\n                ]}\n              >\n                <Ionicons\n                  name="send"\n                  size={20}\n                  color={\n                    input.trim() ? theme.colors.background : theme.colors.border\n                  }\n                />\n              </TouchableOpacity>\n            </View>\n          </View>\n        </View>\n      </KeyboardAvoidingView>\n    </Container>\n  );\n}\n\nconst styles = StyleSheet.create((theme) => ({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: theme.spacing.md,\n    paddingVertical: theme.spacing.lg,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: "center",\n    alignItems: "center",\n    paddingHorizontal: theme.spacing.md,\n  },\n  errorText: {\n    color: theme.colors.destructive,\n    textAlign: "center",\n    fontSize: 18,\n    marginBottom: theme.spacing.md,\n  },\n  errorSubtext: {\n    color: theme.colors.typography,\n    textAlign: "center",\n    fontSize: 16,\n  },\n  header: {\n    marginBottom: theme.spacing.lg,\n  },\n  headerTitle: {\n    fontSize: 28,\n    fontWeight: "bold",\n    color: theme.colors.typography,\n    marginBottom: theme.spacing.sm,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n    color: theme.colors.typography,\n  },\n  messagesContainer: {\n    flex: 1,\n    marginBottom: theme.spacing.md,\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  emptyText: {\n    textAlign: "center",\n    color: theme.colors.typography,\n    fontSize: 18,\n  },\n  messagesWrapper: {\n    gap: theme.spacing.md,\n  },\n  messageContainer: {\n    padding: theme.spacing.md,\n    borderRadius: 8,\n  },\n  userMessage: {\n    backgroundColor: theme.colors.primary + "20",\n    marginLeft: theme.spacing.xl,\n    alignSelf: "flex-end",\n  },\n  assistantMessage: {\n    backgroundColor: theme.colors.background,\n    marginRight: theme.spacing.xl,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n  },\n  messageRole: {\n    fontSize: 14,\n    fontWeight: "600",\n    marginBottom: theme.spacing.sm,\n    color: theme.colors.typography,\n  },\n  messageContent: {\n    color: theme.colors.typography,\n    lineHeight: 20,\n  },\n  toolInvocations: {\n    fontSize: 12,\n    color: theme.colors.typography,\n    fontFamily: "monospace",\n    backgroundColor: theme.colors.border + "40",\n    padding: theme.spacing.sm,\n    borderRadius: 4,\n    marginTop: theme.spacing.sm,\n  },\n  inputSection: {\n    borderTopWidth: 1,\n    borderTopColor: theme.colors.border,\n    paddingTop: theme.spacing.md,\n  },\n  inputContainer: {\n    flexDirection: "row",\n    alignItems: "flex-end",\n    gap: theme.spacing.sm,\n  },\n  textInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n    borderRadius: 8,\n    paddingHorizontal: theme.spacing.md,\n    paddingVertical: theme.spacing.sm,\n    color: theme.colors.typography,\n    backgroundColor: theme.colors.background,\n    fontSize: 16,\n    minHeight: 40,\n    maxHeight: 120,\n  },\n  sendButton: {\n    backgroundColor: theme.colors.primary,\n    padding: theme.spacing.sm,\n    borderRadius: 8,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  sendButtonDisabled: {\n    backgroundColor: theme.colors.border,\n  },\n}));\n`,
        type: "text",
      },
      "examples/ai/native/unistyles/polyfills.js": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "9866d77e7e",
        },
        content: `import structuredClone from "@ungap/structured-clone";\nimport { Platform } from "react-native";\n\nif (Platform.OS !== "web") {\n  const setupPolyfills = async () => {\n    const { polyfillGlobal } = await import(\n      "react-native/Libraries/Utilities/PolyfillFunctions"\n    );\n\n    const { TextEncoderStream, TextDecoderStream } = await import(\n      "@stardazed/streams-text-encoding"\n    );\n\n    if (!("structuredClone" in global)) {\n      polyfillGlobal("structuredClone", () => structuredClone);\n    }\n\n    polyfillGlobal("TextEncoderStream", () => TextEncoderStream);\n    polyfillGlobal("TextDecoderStream", () => TextDecoderStream);\n  };\n\n  setupPolyfills();\n}\n\nexport {};\n`,
        type: "text",
      },
      "examples/ai/server/next/src/app/ai/route.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "eee0d6a73d",
        },
        content: `import { google } from '@ai-sdk/google';\nimport { streamText } from 'ai';\n\nexport const maxDuration = 30;\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json();\n\n  const result = streamText({\n    model: google('gemini-2.0-flash'),\n    messages,\n  });\n\n  return result.toDataStreamResponse();\n}\n`,
        type: "text",
      },
      "examples/ai/web/nuxt/app/pages/ai.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "7dd81ef739",
        },
        content: `<script setup lang="ts">\nimport { useChat } from '@ai-sdk/vue'\nimport { nextTick, ref, watch } from 'vue'\n\nconst config = useRuntimeConfig()\nconst serverUrl = config.public.serverURL\n\nconst { messages, input, handleSubmit } = useChat({\n  api: \`\${serverUrl}/ai\`,\n})\n\nconst messagesEndRef = ref<null | HTMLDivElement>(null)\n\nwatch(messages, async () => {\n  await nextTick()\n  messagesEndRef.value?.scrollIntoView({ behavior: 'smooth' })\n})\n\nfunction getMessageText(message: any) {\n  return message.parts\n    .filter((part: any) => part.type === 'text')\n    .map((part: any) => part.text)\n    .join('')\n}\n</script>\n\n<template>\n  <div class="grid grid-rows-[1fr_auto] overflow-hidden w-full mx-auto p-4">\n    <div class="overflow-y-auto space-y-4 pb-4">\n      <div v-if="messages.length === 0" class="text-center text-muted-foreground mt-8">\n        Ask me anything to get started!\n      </div>\n      <div\n        v-for="message in messages"\n        :key="message.id"\n        :class="[\n          'p-3 rounded-lg',\n          message.role === 'user' ? 'bg-primary/10 ml-8' : 'bg-secondary/20 mr-8'\n        ]"\n      >\n        <p class="text-sm font-semibold mb-1">\n          {{ message.role === 'user' ? 'You' : 'AI Assistant' }}\n        </p>\n        <div class="whitespace-pre-wrap">{{ getMessageText(message) }}</div>\n      </div>\n      <div ref="messagesEndRef" />\n    </div>\n\n    <form @submit.prevent="handleSubmit" class="w-full flex items-center space-x-2 pt-2 border-t">\n      <UInput\n        name="prompt"\n        v-model="input"\n        placeholder="Type your message..."\n        class="flex-1"\n        autocomplete="off"\n        autofocus\n      />\n      <UButton type="submit" color="primary" size="md" square>\n        <UIcon name="i-lucide-send" class="w-5 h-5" />\n      </UButton>\n    </form>\n  </div>\n</template>\n`,
        type: "text",
      },
      "examples/ai/web/react/next/src/app/ai/page.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "0c366c76eb",
        },
        content: `"use client"\n\nimport { useChat } from "@ai-sdk/react";\nimport { Input } from "@/components/ui/input";\nimport { Button } from "@/components/ui/button";\nimport { Send } from "lucide-react";\nimport { useRef, useEffect } from "react";\n\n\nexport default function AIPage() {\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    api: \`\${process.env.NEXT_PUBLIC_SERVER_URL}/ai\`,\n  });\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });\n  }, [messages]);\n\n  return (\n    <div className="grid grid-rows-[1fr_auto] overflow-hidden w-full mx-auto p-4">\n      <div className="overflow-y-auto space-y-4 pb-4">\n        {messages.length === 0 ? (\n          <div className="text-center text-muted-foreground mt-8">\n            Ask me anything to get started!\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div\n              key={message.id}\n              className={\`p-3 rounded-lg \${\n                message.role === "user"\n                  ? "bg-primary/10 ml-8"\n                  : "bg-secondary/20 mr-8"\n              }\`}\n            >\n              <p className="text-sm font-semibold mb-1">\n                {message.role === "user" ? "You" : "AI Assistant"}\n              </p>\n              <div className="whitespace-pre-wrap">{message.content}</div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <form\n        onSubmit={handleSubmit}\n        className="w-full flex items-center space-x-2 pt-2 border-t"\n      >\n        <Input\n          name="prompt"\n          value={input}\n          onChange={handleInputChange}\n          placeholder="Type your message..."\n          className="flex-1"\n          autoComplete="off"\n          autoFocus\n        />\n        <Button type="submit" size="icon">\n          <Send size={18} />\n        </Button>\n      </form>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/ai/web/react/react-router/src/routes/ai.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "47e1850967",
        },
        content: `import { useChat } from "@ai-sdk/react";\nimport { Input } from "@/components/ui/input";\nimport { Button } from "@/components/ui/button";\nimport { Send } from "lucide-react";\nimport { useRef, useEffect } from "react";\n\nexport default function AI() {\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    api: \`\${import.meta.env.VITE_SERVER_URL}/ai\`,\n  });\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });\n  }, [messages]);\n\n  return (\n    <div className="grid grid-rows-[1fr_auto] overflow-hidden w-full mx-auto p-4">\n      <div className="overflow-y-auto space-y-4 pb-4">\n        {messages.length === 0 ? (\n          <div className="text-center text-muted-foreground mt-8">\n            Ask me anything to get started!\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div\n              key={message.id}\n              className={\`p-3 rounded-lg \${\n                message.role === "user"\n                  ? "bg-primary/10 ml-8"\n                  : "bg-secondary/20 mr-8"\n              }\`}\n            >\n              <p className="text-sm font-semibold mb-1">\n                {message.role === "user" ? "You" : "AI Assistant"}\n              </p>\n              <div className="whitespace-pre-wrap">{message.content}</div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <form\n        onSubmit={handleSubmit}\n        className="w-full flex items-center space-x-2 pt-2 border-t"\n      >\n        <Input\n          name="prompt"\n          value={input}\n          onChange={handleInputChange}\n          placeholder="Type your message..."\n          className="flex-1"\n          autoComplete="off"\n          autoFocus\n        />\n        <Button type="submit" size="icon">\n          <Send size={18} />\n        </Button>\n      </form>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/ai/web/react/tanstack-router/src/routes/ai.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "64b5db59bb",
        },
        content: `import { createFileRoute } from "@tanstack/react-router";\nimport { useChat } from "@ai-sdk/react";\nimport { Input } from "@/components/ui/input";\nimport { Button } from "@/components/ui/button";\nimport { Send } from "lucide-react";\nimport { useRef, useEffect } from "react";\n\nexport const Route = createFileRoute("/ai")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    api: \`\${import.meta.env.VITE_SERVER_URL}/ai\`,\n  });\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });\n  }, [messages]);\n\n  return (\n    <div className="grid grid-rows-[1fr_auto] overflow-hidden w-full mx-auto p-4">\n      <div className="overflow-y-auto space-y-4 pb-4">\n        {messages.length === 0 ? (\n          <div className="text-center text-muted-foreground mt-8">\n            Ask me anything to get started!\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div\n              key={message.id}\n              className={\`p-3 rounded-lg \${\n                message.role === "user"\n                  ? "bg-primary/10 ml-8"\n                  : "bg-secondary/20 mr-8"\n              }\`}\n            >\n              <p className="text-sm font-semibold mb-1">\n                {message.role === "user" ? "You" : "AI Assistant"}\n              </p>\n              <div className="whitespace-pre-wrap">{message.content}</div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <form\n        onSubmit={handleSubmit}\n        className="w-full flex items-center space-x-2 pt-2 border-t"\n      >\n        <Input\n          name="prompt"\n          value={input}\n          onChange={handleInputChange}\n          placeholder="Type your message..."\n          className="flex-1"\n          autoComplete="off"\n          autoFocus\n        />\n        <Button type="submit" size="icon">\n          <Send size={18} />\n        </Button>\n      </form>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/ai/web/react/tanstack-start/src/routes/ai.tsx": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "64b5db59bb",
        },
        content: `import { createFileRoute } from "@tanstack/react-router";\nimport { useChat } from "@ai-sdk/react";\nimport { Input } from "@/components/ui/input";\nimport { Button } from "@/components/ui/button";\nimport { Send } from "lucide-react";\nimport { useRef, useEffect } from "react";\n\nexport const Route = createFileRoute("/ai")({\n  component: RouteComponent,\n});\n\nfunction RouteComponent() {\n  const { messages, input, handleInputChange, handleSubmit } = useChat({\n    api: \`\${import.meta.env.VITE_SERVER_URL}/ai\`,\n  });\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });\n  }, [messages]);\n\n  return (\n    <div className="grid grid-rows-[1fr_auto] overflow-hidden w-full mx-auto p-4">\n      <div className="overflow-y-auto space-y-4 pb-4">\n        {messages.length === 0 ? (\n          <div className="text-center text-muted-foreground mt-8">\n            Ask me anything to get started!\n          </div>\n        ) : (\n          messages.map((message) => (\n            <div\n              key={message.id}\n              className={\`p-3 rounded-lg \${\n                message.role === "user"\n                  ? "bg-primary/10 ml-8"\n                  : "bg-secondary/20 mr-8"\n              }\`}\n            >\n              <p className="text-sm font-semibold mb-1">\n                {message.role === "user" ? "You" : "AI Assistant"}\n              </p>\n              <div className="whitespace-pre-wrap">{message.content}</div>\n            </div>\n          ))\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      <form\n        onSubmit={handleSubmit}\n        className="w-full flex items-center space-x-2 pt-2 border-t"\n      >\n        <Input\n          name="prompt"\n          value={input}\n          onChange={handleInputChange}\n          placeholder="Type your message..."\n          className="flex-1"\n          autoComplete="off"\n          autoFocus\n        />\n        <Button type="submit" size="icon">\n          <Send size={18} />\n        </Button>\n      </form>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/ai/web/svelte/src/routes/ai/+page.svelte": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "a6b5e9020b",
        },
        content: `<script lang="ts">\n	import { PUBLIC_SERVER_URL } from '$env/static/public';\n	import { Chat } from '@ai-sdk/svelte';\n\n	const chat = new Chat({\n		api: \`\${PUBLIC_SERVER_URL}/ai\`,\n	});\n\n	let messagesEndElement: HTMLDivElement | null = null;\n\n	$effect(() => {\n		const messageCount = chat.messages.length;\n		if (messageCount > 0) {\n			setTimeout(() => {\n				messagesEndElement?.scrollIntoView({ behavior: 'smooth' });\n			}, 0);\n		}\n	});\n\n</script>\n\n<div class="mx-auto grid h-full w-full max-w-2xl grid-rows-[1fr_auto] overflow-hidden p-4">\n	<div class="mb-4 space-y-4 overflow-y-auto pb-4">\n		{#if chat.messages.length === 0}\n			<div class="mt-8 text-center text-neutral-500">Ask the AI anything to get started!</div>\n		{/if}\n\n		{#each chat.messages as message (message.id)}\n			<div\n				class="w-fit max-w-[85%] rounded-lg p-3 text-sm md:text-base"\n				class:ml-auto={message.role === 'user'}\n				class:bg-indigo-600={message.role === 'user'}\n				class:text-white={message.role === 'user'}\n				class:bg-neutral-700={message.role === 'assistant'}\n				class:text-neutral-100={message.role === 'assistant'}\n			>\n				<p\n					class="mb-1 text-xs font-semibold uppercase tracking-wide"\n					class:text-indigo-200={message.role === 'user'}\n					class:text-neutral-400={message.role === 'assistant'}\n				>\n					{message.role === 'user' ? 'You' : 'AI Assistant'}\n				</p>\n				<div class="whitespace-pre-wrap break-words">\n					{#each message.parts as part, partIndex (partIndex)}\n						{#if part.type === 'text'}\n							{part.text}\n						{:else if part.type === 'tool-invocation'}\n							<pre class="mt-2 rounded bg-neutral-800 p-2 text-xs text-neutral-300"\n								>{JSON.stringify(part.toolInvocation, null, 2)}</pre\n							>\n						{/if}\n					{/each}\n				</div>\n			</div>\n		{/each}\n		<div bind:this={messagesEndElement}></div>\n	</div>\n\n	<form\n		onsubmit={chat.handleSubmit}\n		class="flex w-full items-center space-x-2 border-t border-neutral-700 pt-4"\n	>\n		<input\n			name="prompt"\n			bind:value={chat.input}\n			placeholder="Type your message..."\n			class="flex-1 rounded border border-neutral-600 bg-neutral-800 px-3 py-2 text-neutral-100 placeholder-neutral-500 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500 disabled:opacity-50"\n			autocomplete="off"\n			onkeydown={(e) => {\n				if (e.key === 'Enter' && !e.shiftKey) {\n					e.preventDefault();\n					chat.handleSubmit(e);\n				}\n			}}\n		/>\n		<button\n			type="submit"\n			disabled={!chat.input.trim()}\n			class="inline-flex h-10 w-10 items-center justify-center rounded bg-indigo-600 text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-neutral-900 disabled:cursor-not-allowed disabled:opacity-50"\n			aria-label="Send message"\n		>\n				<svg\n					xmlns="http://www.w3.org/2000/svg"\n					width="18"\n					height="18"\n					viewBox="0 0 24 24"\n					fill="none"\n					stroke="currentColor"\n					stroke-width="2"\n					stroke-linecap="round"\n					stroke-linejoin="round"\n				>\n					<path d="m22 2-7 20-4-9-9-4Z" /><path d="M22 2 11 13" />\n				</svg>\n		</button>\n	</form>\n</div>\n`,
        type: "text",
      },
      "examples/todo/native/nativewind/app/(drawer)/todos.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "2bb32caaba",
        },
        content: `import { useState } from "react";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  ActivityIndicator,\n  Alert,\n} from "react-native";\nimport { Ionicons } from "@expo/vector-icons";\n{{#if (eq backend "convex")}}\nimport { useMutation, useQuery } from "convex/react";\nimport { api } from "@{{projectName}}/backend/convex/_generated/api";\nimport type { Id } from "@{{projectName}}/backend/convex/_generated/dataModel";\n{{else}}\nimport { useMutation, useQuery } from "@tanstack/react-query";\n{{/if}}\n\nimport { Container } from "@/components/container";\n{{#unless (eq backend "convex")}}\n{{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { trpc } from "@/utils/trpc";\n{{/if}}\n{{/unless}}\n\nexport default function TodosScreen() {\n  const [newTodoText, setNewTodoText] = useState("");\n\n  {{#if (eq backend "convex")}}\n  const todos = useQuery(api.todos.getAll);\n  const createTodoMutation = useMutation(api.todos.create);\n  const toggleTodoMutation = useMutation(api.todos.toggle);\n  const deleteTodoMutation = useMutation(api.todos.deleteTodo);\n\n  const handleAddTodo = async () => {\n    const text = newTodoText.trim();\n    if (!text) return;\n    await createTodoMutation({ text });\n    setNewTodoText("");\n  };\n\n  const handleToggleTodo = (id: Id<"todos">, currentCompleted: boolean) => {\n    toggleTodoMutation({ id, completed: !currentCompleted });\n  };\n\n  const handleDeleteTodo = (id: Id<"todos">) => {\n    Alert.alert("Delete Todo", "Are you sure you want to delete this todo?", [\n      { text: "Cancel", style: "cancel" },\n      {\n        text: "Delete",\n        style: "destructive",\n        onPress: () => deleteTodoMutation({ id }),\n      },\n    ]);\n  };\n  {{else}}\n    {{#if (eq api "orpc")}}\n    const todos = useQuery(orpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      orpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      }),\n    );\n    const toggleMutation = useMutation(\n      orpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    const deleteMutation = useMutation(\n      orpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    {{/if}}\n    {{#if (eq api "trpc")}}\n    const todos = useQuery(trpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      trpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      }),\n    );\n    const toggleMutation = useMutation(\n      trpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    const deleteMutation = useMutation(\n      trpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    {{/if}}\n\n  const handleAddTodo = () => {\n    if (newTodoText.trim()) {\n      createMutation.mutate({ text: newTodoText });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    Alert.alert("Delete Todo", "Are you sure you want to delete this todo?", [\n      { text: "Cancel", style: "cancel" },\n      {\n        text: "Delete",\n        style: "destructive",\n        onPress: () => deleteMutation.mutate({ id }),\n      },\n    ]);\n  };\n  {{/if}}\n\n  return (\n    <Container>\n      <ScrollView className="flex-1">\n        <View className="px-4 py-6">\n          <View className="mb-6 rounded-lg border border-border p-4 bg-card">\n            <Text className="text-foreground text-2xl font-bold mb-2">\n              Todo List\n            </Text>\n            <Text className="text-muted-foreground mb-4">\n              Manage your tasks efficiently\n            </Text>\n\n            <View className="mb-6">\n              <View className="flex-row items-center space-x-2 mb-2">\n                <TextInput\n                  value={newTodoText}\n                  onChangeText={setNewTodoText}\n                  placeholder="Add a new task..."\n                  placeholderTextColor="#6b7280"\n                  {{#if (eq backend "convex")}}\n                  {{else}}\n                  editable={!createMutation.isPending}\n                  {{/if}}\n                  className="flex-1 border border-border rounded-md px-3 py-2 text-foreground bg-background"\n                  onSubmitEditing={handleAddTodo}\n                  returnKeyType="done"\n                />\n                <TouchableOpacity\n                  onPress={handleAddTodo}\n                  {{#if (eq backend "convex")}}\n                  disabled={!newTodoText.trim()}\n                  {{else}}\n                  disabled={createMutation.isPending || !newTodoText.trim()}\n                  {{/if}}\n                  className={\`px-4 py-2 rounded-md \${\n                    {{#if (eq backend "convex")}}\n                    !newTodoText.trim()\n                    {{else}}\n                    createMutation.isPending || !newTodoText.trim()\n                    {{/if}}\n                      ? "bg-muted"\n                      : "bg-primary"\n                  }\`}\n                >\n                  {{#if (eq backend "convex")}}\n                  <Text className="text-white font-medium">Add</Text>\n                  {{else}}\n                  {createMutation.isPending ? (\n                    <ActivityIndicator size="small" color="white" />\n                  ) : (\n                    <Text className="text-white font-medium">Add</Text>\n                  )}\n                  {{/if}}\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {{#if (eq backend "convex")}}\n            {todos === undefined ? (\n              <View className="flex justify-center py-8">\n                <ActivityIndicator size="large" color="#3b82f6" />\n              </View>\n            ) : todos.length === 0 ? (\n              <Text className="py-8 text-center text-muted-foreground">\n                No todos yet. Add one above!\n              </Text>\n            ) : (\n              <View className="space-y-2">\n                {todos.map((todo) => (\n                  <View\n                    key={todo._id}\n                    className="flex-row items-center justify-between rounded-md border border-border p-3 bg-background"\n                  >\n                    <View className="flex-row items-center flex-1">\n                      <TouchableOpacity\n                        onPress={() =>\n                          handleToggleTodo(todo._id, todo.completed)\n                        }\n                        className="mr-3"\n                      >\n                        <Ionicons\n                          name={todo.completed ? "checkbox" : "square-outline"}\n                          size={24}\n                          color={todo.completed ? "#22c55e" : "#6b7280"}\n                        />\n                      </TouchableOpacity>\n                      <Text\n                        className={\`flex-1 \${\n                          todo.completed\n                            ? "line-through text-muted-foreground"\n                            : "text-foreground"\n                        }\`}\n                      >\n                        {todo.text}\n                      </Text>\n                    </View>\n                    <TouchableOpacity\n                      onPress={() => handleDeleteTodo(todo._id)}\n                      className="ml-2 p-1"\n                    >\n                      <Ionicons\n                        name="trash-outline"\n                        size={20}\n                        color="#ef4444"\n                      />\n                    </TouchableOpacity>\n                  </View>\n                ))}\n              </View>\n            )}\n            {{else}}\n            {todos.isLoading ? (\n              <View className="flex justify-center py-8">\n                <ActivityIndicator size="large" color="#3b82f6" />\n              </View>\n            ) : todos.data?.length === 0 ? (\n              <Text className="py-8 text-center text-muted-foreground">\n                No todos yet. Add one above!\n              </Text>\n            ) : (\n              <View className="space-y-2">\n                {todos.data?.map((todo) => (\n                  <View\n                    key={todo.id}\n                    className="flex-row items-center justify-between rounded-md border border-border p-3 bg-background"\n                  >\n                    <View className="flex-row items-center flex-1">\n                      <TouchableOpacity\n                        onPress={() =>\n                          handleToggleTodo(todo.id, todo.completed)\n                        }\n                        className="mr-3"\n                      >\n                        <Ionicons\n                          name={todo.completed ? "checkbox" : "square-outline"}\n                          size={24}\n                          color={todo.completed ? "#22c55e" : "#6b7280"}\n                        />\n                      </TouchableOpacity>\n                      <Text\n                        className={\`flex-1 \${\n                          todo.completed\n                            ? "line-through text-muted-foreground"\n                            : "text-foreground"\n                        }\`}\n                      >\n                        {todo.text}\n                      </Text>\n                    </View>\n                    <TouchableOpacity\n                      onPress={() => handleDeleteTodo(todo.id)}\n                      className="ml-2 p-1"\n                    >\n                      <Ionicons\n                        name="trash-outline"\n                        size={20}\n                        color="#ef4444"\n                      />\n                    </TouchableOpacity>\n                  </View>\n                ))}\n              </View>\n            )}\n            {{/if}}\n          </View>\n        </View>\n      </ScrollView>\n    </Container>\n  );\n}\n`,
        type: "text",
      },
      "examples/todo/native/unistyles/app/(drawer)/todos.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "26a877bbb6",
        },
        content: `import { useState } from "react";\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  ActivityIndicator,\n  Alert,\n} from "react-native";\nimport { Ionicons } from "@expo/vector-icons";\nimport { StyleSheet, useUnistyles } from "react-native-unistyles";\n\n{{#if (eq backend "convex")}}\nimport { useMutation, useQuery } from "convex/react";\nimport { api } from "@{{projectName}}/backend/convex/_generated/api";\nimport type { Id } from "@{{projectName}}/backend/convex/_generated/dataModel";\n{{else}}\nimport { useMutation, useQuery } from "@tanstack/react-query";\n{{/if}}\n\nimport { Container } from "@/components/container";\n{{#unless (eq backend "convex")}}\n{{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n{{/if}}\n{{#if (eq api "trpc")}}\nimport { trpc } from "@/utils/trpc";\n{{/if}}\n{{/unless}}\n\nexport default function TodosScreen() {\n  const [newTodoText, setNewTodoText] = useState("");\n  const { theme } = useUnistyles();\n\n  {{#if (eq backend "convex")}}\n  const todos = useQuery(api.todos.getAll);\n  const createTodoMutation = useMutation(api.todos.create);\n  const toggleTodoMutation = useMutation(api.todos.toggle);\n  const deleteTodoMutation = useMutation(api.todos.deleteTodo);\n\n  const handleAddTodo = async () => {\n    const text = newTodoText.trim();\n    if (!text) return;\n    await createTodoMutation({ text });\n    setNewTodoText("");\n  };\n\n  const handleToggleTodo = (id: Id<"todos">, currentCompleted: boolean) => {\n    toggleTodoMutation({ id, completed: !currentCompleted });\n  };\n\n  const handleDeleteTodo = (id: Id<"todos">) => {\n    Alert.alert("Delete Todo", "Are you sure you want to delete this todo?", [\n      { text: "Cancel", style: "cancel" },\n      {\n        text: "Delete",\n        style: "destructive",\n        onPress: () => deleteTodoMutation({ id }),\n      },\n    ]);\n  };\n  {{else}}\n    {{#if (eq api "orpc")}}\n    const todos = useQuery(orpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      orpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      })\n    );\n    const toggleMutation = useMutation(\n      orpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    const deleteMutation = useMutation(\n      orpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    {{/if}}\n    {{#if (eq api "trpc")}}\n    const todos = useQuery(trpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      trpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      })\n    );\n    const toggleMutation = useMutation(\n      trpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    const deleteMutation = useMutation(\n      trpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    {{/if}}\n\n  const handleAddTodo = () => {\n    if (newTodoText.trim()) {\n      createMutation.mutate({ text: newTodoText });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    Alert.alert("Delete Todo", "Are you sure you want to delete this todo?", [\n      { text: "Cancel", style: "cancel" },\n      {\n        text: "Delete",\n        style: "destructive",\n        onPress: () => deleteMutation.mutate({ id }),\n      },\n    ]);\n  };\n  {{/if}}\n\n  const isLoading = {{#if (eq backend "convex")}}!todos{{else}}todos.isLoading{{/if}};\n  const isCreating = {{#if (eq backend "convex")}}false{{else}}createMutation.isPending{{/if}};\n  const primaryButtonTextColor = theme.colors.background;\n\n  return (\n    <Container>\n      <ScrollView style={styles.scrollView}>\n        <View style={styles.headerContainer}>\n          <Text style={styles.headerTitle}>Todo List</Text>\n          <Text style={styles.headerSubtitle}>\n            Manage your tasks efficiently\n          </Text>\n\n          <View style={styles.inputContainer}>\n            <TextInput\n              value={newTodoText}\n              onChangeText={setNewTodoText}\n              placeholder="Add a new task..."\n              placeholderTextColor={theme.colors.border}\n              editable={!isCreating}\n              style={styles.textInput}\n              onSubmitEditing={handleAddTodo}\n              returnKeyType="done"\n            />\n            <TouchableOpacity\n              onPress={handleAddTodo}\n              disabled={isCreating || !newTodoText.trim()}\n              style={[\n                styles.addButton,\n                (isCreating || !newTodoText.trim()) && styles.addButtonDisabled,\n              ]}\n            >\n              {isCreating ? (\n                <ActivityIndicator size="small" color={primaryButtonTextColor} />\n              ) : (\n                <Ionicons\n                  name="add"\n                  size={24}\n                  color={primaryButtonTextColor}\n                />\n              )}\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {isLoading && (\n          <View style={styles.loadingContainer}>\n            <ActivityIndicator size="large" color={theme.colors.primary} />\n            <Text style={styles.loadingText}>Loading todos...</Text>\n          </View>\n        )}\n\n        {{#if (eq backend "convex")}}\n          {todos && todos.length === 0 && !isLoading && (\n            <Text style={styles.emptyText}>No todos yet. Add one!</Text>\n          )}\n          {todos?.map((todo) => (\n            <View key={todo._id} style={styles.todoItem}>\n              <TouchableOpacity\n                onPress={() => handleToggleTodo(todo._id, todo.completed)}\n                style={styles.todoContent}\n              >\n                <Ionicons\n                  name={todo.completed ? "checkbox" : "square-outline"}\n                  size={24}\n                  color={todo.completed ? theme.colors.primary : theme.colors.typography}\n                  style={styles.checkbox}\n                />\n                <Text\n                  style={[\n                    styles.todoText,\n                    todo.completed && styles.todoTextCompleted,\n                  ]}\n                >\n                  {todo.text}\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity onPress={() => handleDeleteTodo(todo._id)}>\n                <Ionicons name="trash-outline" size={24} color={theme.colors.destructive} />\n              </TouchableOpacity>\n            </View>\n          ))}\n        {{else}}\n          {todos.data && todos.data.length === 0 && !isLoading && (\n             <Text style={styles.emptyText}>No todos yet. Add one!</Text>\n          )}\n          {todos.data?.map((todo: { id: number; text: string; completed: boolean }) => (\n            <View key={todo.id} style={styles.todoItem}>\n              <TouchableOpacity\n                onPress={() => handleToggleTodo(todo.id, todo.completed)}\n                style={styles.todoContent}\n              >\n                <Ionicons\n                  name={todo.completed ? "checkbox" : "square-outline"}\n                  size={24}\n                  color={todo.completed ? theme.colors.primary : theme.colors.typography}\n                  style={styles.checkbox}\n                />\n                <Text\n                  style={[\n                    styles.todoText,\n                    todo.completed && styles.todoTextCompleted,\n                  ]}\n                >\n                  {todo.text}\n                </Text>\n              </TouchableOpacity>\n              <TouchableOpacity onPress={() => handleDeleteTodo(todo.id)}>\n                <Ionicons name="trash-outline" size={24} color={theme.colors.destructive} />\n              </TouchableOpacity>\n            </View>\n          ))}\n        {{/if}}\n      </ScrollView>\n    </Container>\n  );\n}\n\nconst styles = StyleSheet.create((theme) => ({\n  scrollView: {\n    flex: 1,\n  },\n  headerContainer: {\n    paddingHorizontal: theme.spacing.md,\n    paddingVertical: theme.spacing.lg,\n    borderBottomWidth: 1,\n    borderBottomColor: theme.colors.border,\n    backgroundColor: theme.colors.background,\n  },\n  headerTitle: {\n    fontSize: 28,\n    fontWeight: "bold",\n    color: theme.colors.typography,\n    marginBottom: theme.spacing.sm,\n  },\n  headerSubtitle: {\n    fontSize: 16,\n    color: theme.colors.typography,\n    marginBottom: theme.spacing.md,\n  },\n  inputContainer: {\n    flexDirection: "row",\n    alignItems: "center",\n    marginBottom: theme.spacing.md,\n  },\n  textInput: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: theme.colors.border,\n    borderRadius: 8,\n    paddingHorizontal: theme.spacing.md,\n    paddingVertical: theme.spacing.sm,\n    color: theme.colors.typography,\n    backgroundColor: theme.colors.background,\n    marginRight: theme.spacing.sm,\n    fontSize: 16,\n  },\n  addButton: {\n    backgroundColor: theme.colors.primary,\n    padding: theme.spacing.sm,\n    borderRadius: 8,\n    justifyContent: "center",\n    alignItems: "center",\n  },\n  addButtonDisabled: {\n    backgroundColor: theme.colors.border,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: "center",\n    alignItems: "center",\n    padding: theme.spacing.lg,\n  },\n  loadingText: {\n    marginTop: theme.spacing.sm,\n    fontSize: 16,\n    color: theme.colors.typography,\n  },\n  emptyText: {\n    textAlign: "center",\n    marginTop: theme.spacing.xl,\n    fontSize: 16,\n    color: theme.colors.typography,\n  },\n  todoItem: {\n    flexDirection: "row",\n    justifyContent: "space-between",\n    alignItems: "center",\n    paddingVertical: theme.spacing.md,\n    paddingHorizontal: theme.spacing.md,\n    borderBottomWidth: 1,\n    borderBottomColor: theme.colors.border,\n    backgroundColor: theme.colors.background,\n  },\n  todoContent: {\n    flexDirection: "row",\n    alignItems: "center",\n    flex: 1,\n  },\n  checkbox: {\n    marginRight: theme.spacing.md,\n  },\n  todoText: {\n    fontSize: 16,\n    color: theme.colors.typography,\n    flex: 1,\n  },\n  todoTextCompleted: {\n    textDecorationLine: "line-through",\n    color: theme.colors.border,\n  },\n}));\n`,
        type: "text",
      },
      "examples/todo/server/drizzle/base/src/routers/todo.ts.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "9410e1685b",
        },
        content: `{{#if (eq api "orpc")}}\nimport { eq } from "drizzle-orm";\nimport z from "zod/v4";\nimport { db } from "../db";\nimport { todo } from "../db/schema/todo";\nimport { publicProcedure } from "../lib/orpc";\n\nexport const todoRouter = {\n  getAll: publicProcedure.handler(async () => {\n    return await db.select().from(todo);\n  }),\n\n  create: publicProcedure\n    .input(z.object({ text: z.string().min(1) }))\n    .handler(async ({ input }) => {\n      const result = await db\n        .insert(todo)\n        .values({\n          text: input.text,\n        })\n        .returning();\n      return result[0];\n    }),\n\n  toggle: publicProcedure\n    .input(z.object({ id: z.number(), completed: z.boolean() }))\n    .handler(async ({ input }) => {\n      await db\n        .update(todo)\n        .set({ completed: input.completed })\n        .where(eq(todo.id, input.id));\n      return { success: true };\n    }),\n\n  delete: publicProcedure\n    .input(z.object({ id: z.number() }))\n    .handler(async ({ input }) => {\n      await db.delete(todo).where(eq(todo.id, input.id));\n      return { success: true };\n    }),\n};\n{{/if}}\n\n{{#if (eq api "trpc")}}\nimport z from "zod/v4";\nimport { router, publicProcedure } from "../lib/trpc";\nimport { todo } from "../db/schema/todo";\nimport { eq } from "drizzle-orm";\nimport { db } from "../db";\n\nexport const todoRouter = router({\n  getAll: publicProcedure.query(async () => {\n    return await db.select().from(todo);\n  }),\n\n  create: publicProcedure\n    .input(z.object({ text: z.string().min(1) }))\n    .mutation(async ({ input }) => {\n      return await db.insert(todo).values({\n        text: input.text,\n      });\n    }),\n\n  toggle: publicProcedure\n    .input(z.object({ id: z.number(), completed: z.boolean() }))\n    .mutation(async ({ input }) => {\n      return await db\n        .update(todo)\n        .set({ completed: input.completed })\n        .where(eq(todo.id, input.id));\n    }),\n\n  delete: publicProcedure\n    .input(z.object({ id: z.number() }))\n    .mutation(async ({ input }) => {\n      return await db.delete(todo).where(eq(todo.id, input.id));\n    }),\n});\n{{/if}}\n`,
        type: "text",
      },
      "examples/todo/server/drizzle/mysql/src/db/schema/todo.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "81aa9be62e",
        },
        content: `import { mysqlTable, varchar, int, boolean } from "drizzle-orm/mysql-core";\n\nexport const todo = mysqlTable("todo", {\n  id: int("id").primaryKey().autoincrement(),\n  text: varchar("text", { length: 255 }).notNull(),\n  completed: boolean("completed").default(false).notNull(),\n});\n`,
        type: "text",
      },
      "examples/todo/server/drizzle/postgres/src/db/schema/todo.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "9a25bd9121",
        },
        content: `import { pgTable, text, boolean, serial } from "drizzle-orm/pg-core";\n\nexport const todo = pgTable("todo", {\n  id: serial("id").primaryKey(),\n  text: text("text").notNull(),\n  completed: boolean("completed").default(false).notNull()\n});\n`,
        type: "text",
      },
      "examples/todo/server/drizzle/sqlite/src/db/schema/todo.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "5b49068b07",
        },
        content: `import { integer, sqliteTable, text } from "drizzle-orm/sqlite-core";\n\nexport const todo = sqliteTable("todo", {\n  id: integer("id").primaryKey({ autoIncrement: true }),\n  text: text("text").notNull(),\n  completed: integer("completed", { mode: "boolean" }).default(false).notNull(),\n});\n`,
        type: "text",
      },
      "examples/todo/server/mongoose/base/src/routers/todo.ts.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "3b24eb8d8b",
        },
        content: `{{#if (eq api "orpc")}}\nimport z from "zod/v4";\nimport { publicProcedure } from "../lib/orpc";\nimport { Todo } from "../db/models/todo.model";\n\nexport const todoRouter = {\n    getAll: publicProcedure.handler(async () => {\n        return await Todo.find().lean();\n    }),\n\n    create: publicProcedure\n        .input(z.object({ text: z.string().min(1) }))\n        .handler(async ({ input }) => {\n            const newTodo = await Todo.create({ text: input.text });\n            return newTodo.toObject();\n    }),\n\n    toggle: publicProcedure\n        .input(z.object({ id: z.string(), completed: z.boolean() }))\n        .handler(async ({ input }) => {\n            await Todo.updateOne({ id: input.id }, { completed: input.completed });\n            return { success: true };\n    }),\n\n    delete: publicProcedure\n        .input(z.object({ id: z.string() }))\n        .handler(async ({ input }) => {\n            await Todo.deleteOne({ id: input.id });\n            return { success: true };\n    }),\n};\n\n{{/if}}\n\n{{#if (eq api "trpc")}}\nimport z from "zod/v4";\nimport { router, publicProcedure } from "../lib/trpc";\nimport { Todo } from "../db/models/todo.model";\n\nexport const todoRouter = router({\n    getAll: publicProcedure.query(async () => {\n        return await Todo.find().lean();\n    }),\n\n    create: publicProcedure\n        .input(z.object({ text: z.string().min(1) }))\n        .mutation(async ({ input }) => {\n            const newTodo = await Todo.create({ text: input.text });\n        return newTodo.toObject();\n    }),\n\n    toggle: publicProcedure\n        .input(z.object({ id: z.string(), completed: z.boolean() }))\n        .mutation(async ({ input }) => {\n            await Todo.updateOne({ id: input.id }, { completed: input.completed });\n            return { success: true };\n    }),\n\n    delete: publicProcedure\n        .input(z.object({ id: z.string() }))\n        .mutation(async ({ input }) => {\n            await Todo.deleteOne({ id: input.id });\n            return { success: true };\n    }),\n});\n{{/if}}\n`,
        type: "text",
      },
      "examples/todo/server/mongoose/mongodb/src/db/models/todo.model.ts": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "cde8d8384d",
        },
        content: `import mongoose from 'mongoose';\n\nconst { Schema, model } = mongoose;\n\nconst todoSchema = new Schema({\n  id: {\n    type: mongoose.Schema.Types.ObjectId,\n    auto: true,\n  },\n  text: {\n    type: String,\n    required: true,\n  },\n  completed: {\n    type: Boolean,\n    default: false,\n  },\n}, {\n  collection: 'todo'\n});\n\nconst Todo = model('Todo', todoSchema);\n\nexport { Todo };\n`,
        type: "text",
      },
      "examples/todo/server/prisma/base/src/routers/todo.ts.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "547defb0a3",
        },
        content: `{{#if (eq api "orpc")}}\nimport z from "zod/v4";\nimport prisma from "../../prisma";\nimport { publicProcedure } from "../lib/orpc";\n\nexport const todoRouter = {\n  getAll: publicProcedure.handler(async () => {\n    return await prisma.todo.findMany({\n      orderBy: {\n        id: "asc",\n      },\n    });\n  }),\n\n  create: publicProcedure\n    .input(z.object({ text: z.string().min(1) }))\n    .handler(async ({ input }) => {\n      return await prisma.todo.create({\n        data: {\n          text: input.text,\n        },\n      });\n    }),\n\n  toggle: publicProcedure\n    {{#if (eq database "mongodb")}}\n    .input(z.object({ id: z.string(), completed: z.boolean() }))\n    {{else}}\n    .input(z.object({ id: z.number(), completed: z.boolean() }))\n    {{/if}}\n    .handler(async ({ input }) => {\n      await prisma.todo.update({\n        where: { id: input.id },\n        data: { completed: input.completed },\n      });\n      return { success: true };\n    }),\n\n  delete: publicProcedure\n    {{#if (eq database "mongodb")}}\n    .input(z.object({ id: z.string() }))\n    {{else}}\n    .input(z.object({ id: z.number() }))\n    {{/if}}\n    .handler(async ({ input }) => {\n      await prisma.todo.delete({\n        where: { id: input.id },\n      });\n      return { success: true };\n    }),\n};\n{{/if}}\n\n{{#if (eq api "trpc")}}\nimport { TRPCError } from "@trpc/server";\nimport z from "zod/v4";\nimport prisma from "../../prisma";\nimport { publicProcedure, router } from "../lib/trpc";\n\nexport const todoRouter = router({\n  getAll: publicProcedure.query(async () => {\n    return await prisma.todo.findMany({\n      orderBy: {\n        id: "asc"\n      }\n    });\n  }),\n\n  create: publicProcedure\n    .input(z.object({ text: z.string().min(1) }))\n    .mutation(async ({ input }) => {\n      return await prisma.todo.create({\n        data: {\n          text: input.text,\n        },\n      });\n    }),\n\n  toggle: publicProcedure\n    {{#if (eq database "mongodb")}}\n    .input(z.object({ id: z.string(), completed: z.boolean() }))\n    {{else}}\n    .input(z.object({ id: z.number(), completed: z.boolean() }))\n    {{/if}}\n    .mutation(async ({ input }) => {\n      try {\n        return await prisma.todo.update({\n          where: { id: input.id },\n          data: { completed: input.completed },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: "NOT_FOUND",\n          message: "Todo not found",\n        });\n      }\n    }),\n\n  delete: publicProcedure\n    {{#if (eq database "mongodb")}}\n    .input(z.object({ id: z.string() }))\n    {{else}}\n    .input(z.object({ id: z.number() }))\n    {{/if}}\n    .mutation(async ({ input }) => {\n      try {\n        return await prisma.todo.delete({\n          where: { id: input.id },\n        });\n      } catch (error) {\n        throw new TRPCError({\n          code: "NOT_FOUND",\n          message: "Todo not found",\n        });\n      }\n    }),\n});\n{{/if}}\n`,
        type: "text",
      },
      "examples/todo/server/prisma/mongodb/prisma/schema/todo.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "509c80584c",
        },
        content: `model Todo {\n  id        String  @id @default(auto()) @map("_id") @db.ObjectId\n  text      String\n  completed Boolean @default(false)\n\n  @@map("todo")\n}\n`,
        type: "text",
      },
      "examples/todo/server/prisma/mysql/prisma/schema/todo.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "07d1175c34",
        },
        content: `model Todo {\n  id        Int     @id @default(autoincrement())\n  text      String\n  completed Boolean @default(false)\n\n  @@map("todo")\n}\n`,
        type: "text",
      },
      "examples/todo/server/prisma/postgres/prisma/schema/todo.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "07d1175c34",
        },
        content: `model Todo {\n  id        Int     @id @default(autoincrement())\n  text      String\n  completed Boolean @default(false)\n\n  @@map("todo")\n}\n`,
        type: "text",
      },
      "examples/todo/server/prisma/sqlite/prisma/schema/todo.prisma": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "07d1175c34",
        },
        content: `model Todo {\n  id        Int     @id @default(autoincrement())\n  text      String\n  completed Boolean @default(false)\n\n  @@map("todo")\n}\n`,
        type: "text",
      },
      "examples/todo/web/nuxt/app/pages/todos.vue": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "5770b2133c",
        },
        content: `<script setup lang="ts">\nimport { ref } from 'vue'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/vue-query'\n\nconst { $orpc } = useNuxtApp()\n\nconst newTodoText = ref('')\nconst queryClient = useQueryClient()\n\nconst todos = useQuery($orpc.todo.getAll.queryOptions())\n\nconst createMutation = useMutation($orpc.todo.create.mutationOptions({\n  onSuccess: () => {\n    queryClient.invalidateQueries()\n    newTodoText.value = ''\n  }\n}))\n\nconst toggleMutation = useMutation($orpc.todo.toggle.mutationOptions({\n  onSuccess: () => queryClient.invalidateQueries()\n}))\n\nconst deleteMutation = useMutation($orpc.todo.delete.mutationOptions({\n  onSuccess: () => queryClient.invalidateQueries()\n}))\n\nfunction handleAddTodo() {\n  if (newTodoText.value.trim()) {\n    createMutation.mutate({ text: newTodoText.value })\n  }\n}\n\nfunction handleToggleTodo(id: number, completed: boolean) {\n  toggleMutation.mutate({ id, completed: !completed })\n}\n\nfunction handleDeleteTodo(id: number) {\n  deleteMutation.mutate({ id })\n}\n</script>\n\n<template>\n  <div class="mx-auto w-full max-w-md py-10">\n    <UCard>\n      <template #header>\n        <div>\n          <div class="text-xl font-bold">Todo List</div>\n          <div class="text-muted text-sm">Manage your tasks efficiently</div>\n        </div>\n      </template>\n      <form @submit.prevent="handleAddTodo" class="mb-6 flex items-center gap-2">\n        <UInput\n          v-model="newTodoText"\n          placeholder="Add a new task..."\n          autocomplete="off"\n          class="w-full"\n        />\n        <UButton\n          type="submit"\n          icon="i-lucide-plus"\n        >\n          Add\n        </UButton>\n      </form>\n\n      <div v-if="todos.status.value === 'pending'" class="flex justify-center py-4">\n        <UIcon name="i-lucide-loader-2" class="animate-spin w-6 h-6" />\n      </div>\n      <p v-else-if="todos.status.value === 'error'" class="py-4 text-center text-red-500">\n        Error: {{ todos.error.value?.message || 'Failed to load todos' }}\n      </p>\n      <p v-else-if="todos.data.value?.length === 0" class="py-4 text-center">\n        No todos yet. Add one above!\n      </p>\n      <ul v-else class="space-y-2">\n        <li\n          v-for="todo in todos.data.value"\n          :key="todo.id"\n          class="flex items-center justify-between rounded-md border p-2"\n        >\n          <div class="flex items-center gap-2">\n            <UCheckbox\n              :model-value="todo.completed"\n              @update:model-value="() => handleToggleTodo(todo.id, todo.completed)"\n              :id="\`todo-\${todo.id}\`"\n            />\n            <label\n              :for="\`todo-\${todo.id}\`"\n              :class="{ 'line-through text-muted': todo.completed }"\n              class="cursor-pointer"\n            >\n              {{ todo.text }}\n            </label>\n          </div>\n          <UButton\n            color="neutral"\n            variant="ghost"\n            size="sm"\n            square\n            @click="handleDeleteTodo(todo.id)"\n            aria-label="Delete todo"\n            icon="i-lucide-trash-2"\n          />\n        </li>\n      </ul>\n    </UCard>\n  </div>\n</template>\n`,
        type: "text",
      },
      "examples/todo/web/react/next/src/app/todos/page.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "dbf393c2f2",
        },
        content: `"use client"\n\nimport { Button } from "@/components/ui/button";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from "@/components/ui/card";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport { Input } from "@/components/ui/input";\nimport { Loader2, Trash2 } from "lucide-react";\nimport { useState } from "react";\n\n{{#if (eq backend "convex")}}\nimport { useMutation, useQuery } from "convex/react";\nimport { api } from "@{{projectName}}/backend/convex/_generated/api";\nimport type { Id } from "@{{projectName}}/backend/convex/_generated/dataModel";\n{{else}}\nimport { useMutation, useQuery } from "@tanstack/react-query";\n  {{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n  {{/if}}\n  {{#if (eq api "trpc")}}\nimport { trpc } from "@/utils/trpc";\n  {{/if}}\n{{/if}}\n\n\nexport default function TodosPage() {\n  const [newTodoText, setNewTodoText] = useState("");\n\n  {{#if (eq backend "convex")}}\n  const todos = useQuery(api.todos.getAll);\n  const createTodoMutation = useMutation(api.todos.create);\n  const toggleTodoMutation = useMutation(api.todos.toggle);\n  const deleteTodoMutation = useMutation(api.todos.deleteTodo);\n\n  const handleAddTodo = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const text = newTodoText.trim();\n    if (!text) return;\n    await createTodoMutation({ text });\n    setNewTodoText("");\n  };\n\n  const handleToggleTodo = (id: Id<"todos">, currentCompleted: boolean) => {\n    toggleTodoMutation({ id, completed: !currentCompleted });\n  };\n\n  const handleDeleteTodo = (id: Id<"todos">) => {\n    deleteTodoMutation({ id });\n  };\n  {{else}}\n    {{#if (eq api "orpc")}}\n    const todos = useQuery(orpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      orpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      }),\n    );\n    const toggleMutation = useMutation(\n      orpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    const deleteMutation = useMutation(\n      orpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    {{/if}}\n    {{#if (eq api "trpc")}}\n    const todos = useQuery(trpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      trpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      }),\n    );\n    const toggleMutation = useMutation(\n      trpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    const deleteMutation = useMutation(\n      trpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    {{/if}}\n\n  const handleAddTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newTodoText.trim()) {\n      createMutation.mutate({ text: newTodoText });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    deleteMutation.mutate({ id });\n  };\n  {{/if}}\n\n  return (\n    <div className="mx-auto w-full max-w-md py-10">\n      <Card>\n        <CardHeader>\n          <CardTitle>Todo List</CardTitle>\n          <CardDescription>Manage your tasks efficiently</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form\n            onSubmit={handleAddTodo}\n            className="mb-6 flex items-center space-x-2"\n          >\n            <Input\n              value={newTodoText}\n              onChange={(e) => setNewTodoText(e.target.value)}\n              placeholder="Add a new task..."\n              {{#if (eq backend "convex")}}\n              {{else}}\n              disabled={createMutation.isPending}\n              {{/if}}\n            />\n            <Button\n              type="submit"\n              {{#if (eq backend "convex")}}\n              disabled={!newTodoText.trim()}\n              {{else}}\n              disabled={createMutation.isPending || !newTodoText.trim()}\n              {{/if}}\n            >\n              {{#if (eq backend "convex")}}\n                Add\n              {{else}}\n                {createMutation.isPending ? (\n                  <Loader2 className="h-4 w-4 animate-spin" />\n                ) : (\n                  "Add"\n                )}\n              {{/if}}\n            </Button>\n          </form>\n\n          {{#if (eq backend "convex")}}\n            {todos === undefined ? (\n              <div className="flex justify-center py-4">\n                <Loader2 className="h-6 w-6 animate-spin" />\n              </div>\n            ) : todos.length === 0 ? (\n              <p className="py-4 text-center">No todos yet. Add one above!</p>\n            ) : (\n              <ul className="space-y-2">\n                {todos.map((todo) => (\n                  <li\n                    key={todo._id}\n                    className="flex items-center justify-between rounded-md border p-2"\n                  >\n                    <div className="flex items-center space-x-2">\n                      <Checkbox\n                        checked={todo.completed}\n                        onCheckedChange={() =>\n                          handleToggleTodo(todo._id, todo.completed)\n                        }\n                        id={\`todo-\${todo._id}\`}\n                      />\n                      <label\n                        htmlFor={\`todo-\${todo._id}\`}\n                        className={\`\${todo.completed ? "line-through text-muted-foreground" : ""}\`}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <Button\n                      variant="ghost"\n                      size="icon"\n                      onClick={() => handleDeleteTodo(todo._id)}\n                      aria-label="Delete todo"\n                    >\n                      <Trash2 className="h-4 w-4" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          {{else}}\n            {todos.isLoading ? (\n              <div className="flex justify-center py-4">\n                <Loader2 className="h-6 w-6 animate-spin" />\n              </div>\n            ) : todos.data?.length === 0 ? (\n              <p className="py-4 text-center">\n                No todos yet. Add one above!\n              </p>\n            ) : (\n              <ul className="space-y-2">\n                {todos.data?.map((todo) => (\n                  <li\n                    key={todo.id}\n                    className="flex items-center justify-between rounded-md border p-2"\n                  >\n                    <div className="flex items-center space-x-2">\n                      <Checkbox\n                        checked={todo.completed}\n                        onCheckedChange={() =>\n                          handleToggleTodo(todo.id, todo.completed)\n                        }\n                        id={\`todo-\${todo.id}\`}\n                      />\n                      <label\n                        htmlFor={\`todo-\${todo.id}\`}\n                        className={\`\${todo.completed ? "line-through text-muted-foreground" : ""}\`}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <Button\n                      variant="ghost"\n                      size="icon"\n                      onClick={() => handleDeleteTodo(todo.id)}\n                      aria-label="Delete todo"\n                    >\n                      <Trash2 className="h-4 w-4" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          {{/if}}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/todo/web/react/react-router/src/routes/todos.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "d356a03356",
        },
        content: `import { Button } from "@/components/ui/button";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from "@/components/ui/card";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport { Input } from "@/components/ui/input";\nimport { Loader2, Trash2 } from "lucide-react";\nimport { useState } from "react";\n\n{{#if (eq backend "convex")}}\nimport { useMutation, useQuery } from "convex/react";\nimport { api } from "@{{projectName}}/backend/convex/_generated/api";\nimport type { Id } from "@{{projectName}}/backend/convex/_generated/dataModel";\n{{else}}\n  {{#if (eq api "orpc")}}\n  import { orpc } from "@/utils/orpc";\n  {{/if}}\n  {{#if (eq api "trpc")}}\n  import { trpc } from "@/utils/trpc";\n  {{/if}}\nimport { useMutation, useQuery } from "@tanstack/react-query";\n{{/if}}\n\nexport default function Todos() {\n  const [newTodoText, setNewTodoText] = useState("");\n\n  {{#if (eq backend "convex")}}\n  const todos = useQuery(api.todos.getAll);\n  const createTodo = useMutation(api.todos.create);\n  const toggleTodo = useMutation(api.todos.toggle);\n  const deleteTodo = useMutation(api.todos.deleteTodo);\n\n  const handleAddTodo = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const text = newTodoText.trim();\n    if (!text) return;\n    await createTodo({ text });\n    setNewTodoText("");\n  };\n\n  const handleToggleTodo = (id: Id<"todos">, currentCompleted: boolean) => {\n    toggleTodo({ id, completed: !currentCompleted });\n  };\n\n  const handleDeleteTodo = (id: Id<"todos">) => {\n    deleteTodo({ id });\n  };\n  {{else}}\n    {{#if (eq api "orpc")}}\n    const todos = useQuery(orpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      orpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      })\n    );\n    const toggleMutation = useMutation(\n      orpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    const deleteMutation = useMutation(\n      orpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    {{/if}}\n    {{#if (eq api "trpc")}}\n    const todos = useQuery(trpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      trpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      })\n    );\n    const toggleMutation = useMutation(\n      trpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    const deleteMutation = useMutation(\n      trpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      })\n    );\n    {{/if}}\n\n  const handleAddTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newTodoText.trim()) {\n      createMutation.mutate({ text: newTodoText });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    deleteMutation.mutate({ id });\n  };\n  {{/if}}\n\n  return (\n    <div className="w-full mx-auto max-w-md py-10">\n      <Card>\n        <CardHeader>\n          <CardTitle>Todo List</CardTitle>\n          <CardDescription>Manage your tasks efficiently</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form\n            onSubmit={handleAddTodo}\n            className="mb-6 flex items-center space-x-2"\n          >\n            <Input\n              value={newTodoText}\n              onChange={(e) => setNewTodoText(e.target.value)}\n              placeholder="Add a new task..."\n              {{#if (eq backend "convex")}}\n              {{else}}\n              disabled={createMutation.isPending}\n              {{/if}}\n            />\n            <Button\n              type="submit"\n              {{#if (eq backend "convex")}}\n              disabled={!newTodoText.trim()}\n              {{else}}\n              disabled={createMutation.isPending || !newTodoText.trim()}\n              {{/if}}\n            >\n              {{#if (eq backend "convex")}}\n              Add\n              {{else}}\n                {createMutation.isPending ? (\n                  <Loader2 className="h-4 w-4 animate-spin" />\n                ) : (\n                  "Add"\n                )}\n              {{/if}}\n            </Button>\n          </form>\n\n          {{#if (eq backend "convex")}}\n            {todos === undefined ? (\n              <div className="flex justify-center py-4">\n                <Loader2 className="h-6 w-6 animate-spin" />\n              </div>\n            ) : todos.length === 0 ? (\n              <p className="py-4 text-center">No todos yet. Add one above!</p>\n            ) : (\n              <ul className="space-y-2">\n                {todos.map((todo) => (\n                  <li\n                    key={todo._id}\n                    className="flex items-center justify-between rounded-md border p-2"\n                  >\n                    <div className="flex items-center space-x-2">\n                      <Checkbox\n                        checked={todo.completed}\n                        onCheckedChange={() =>\n                          handleToggleTodo(todo._id, todo.completed)\n                        }\n                        id={\`todo-\${todo._id}\`}\n                      />\n                      <label\n                        htmlFor={\`todo-\${todo._id}\`}\n                        className={\`\${todo.completed ? "line-through text-muted-foreground" : ""}\`}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <Button\n                      variant="ghost"\n                      size="icon"\n                      onClick={() => handleDeleteTodo(todo._id)}\n                      aria-label="Delete todo"\n                    >\n                      <Trash2 className="h-4 w-4" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          {{else}}\n            {todos.isLoading ? (\n              <div className="flex justify-center py-4">\n                <Loader2 className="h-6 w-6 animate-spin" />\n              </div>\n            ) : todos.data?.length === 0 ? (\n              <p className="py-4 text-center">\n                No todos yet. Add one above!\n              </p>\n            ) : (\n              <ul className="space-y-2">\n                {todos.data?.map((todo) => (\n                  <li\n                    key={todo.id}\n                    className="flex items-center justify-between rounded-md border p-2"\n                  >\n                    <div className="flex items-center space-x-2">\n                      <Checkbox\n                        checked={todo.completed}\n                        onCheckedChange={() =>\n                          handleToggleTodo(todo.id, todo.completed)\n                        }\n                        id={\`todo-\${todo.id}\`}\n                      />\n                      <label\n                        htmlFor={\`todo-\${todo.id}\`}\n                        className={\`\${todo.completed ? "line-through" : ""}\`}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <Button\n                      variant="ghost"\n                      size="icon"\n                      onClick={() => handleDeleteTodo(todo.id)}\n                      aria-label="Delete todo"\n                    >\n                      <Trash2 className="h-4 w-4" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          {{/if}}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/todo/web/react/tanstack-router/src/routes/todos.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "0e20c217d0",
        },
        content: `import { Button } from "@/components/ui/button";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from "@/components/ui/card";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport { Input } from "@/components/ui/input";\nimport { createFileRoute } from "@tanstack/react-router";\nimport { Loader2, Trash2 } from "lucide-react";\nimport { useState } from "react";\n\n{{#if (eq backend "convex")}}\nimport { useMutation, useQuery } from "convex/react";\nimport { api } from "@{{projectName}}/backend/convex/_generated/api";\nimport type { Id } from "@{{projectName}}/backend/convex/_generated/dataModel";\n{{else}}\n  {{#if (eq api "orpc")}}\n  import { orpc } from "@/utils/orpc";\n  {{/if}}\n  {{#if (eq api "trpc")}}\n  import { trpc } from "@/utils/trpc";\n  {{/if}}\nimport { useMutation, useQuery } from "@tanstack/react-query";\n{{/if}}\n\nexport const Route = createFileRoute("/todos")({\n  component: TodosRoute,\n});\n\nfunction TodosRoute() {\n  const [newTodoText, setNewTodoText] = useState("");\n\n  {{#if (eq backend "convex")}}\n  const todos = useQuery(api.todos.getAll);\n  const createTodo = useMutation(api.todos.create);\n  const toggleTodo = useMutation(api.todos.toggle);\n  const deleteTodo = useMutation(api.todos.deleteTodo);\n\n  const handleAddTodo = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const text = newTodoText.trim();\n    if (!text) return;\n    await createTodo({ text });\n    setNewTodoText("");\n  };\n\n  const handleToggleTodo = (id: Id<"todos">, currentCompleted: boolean) => {\n    toggleTodo({ id, completed: !currentCompleted });\n  };\n\n  const handleDeleteTodo = (id: Id<"todos">) => {\n    deleteTodo({ id });\n  };\n  {{else}}\n    {{#if (eq api "orpc")}}\n    const todos = useQuery(orpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      orpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      }),\n    );\n    const toggleMutation = useMutation(\n      orpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    const deleteMutation = useMutation(\n      orpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    {{/if}}\n    {{#if (eq api "trpc")}}\n    const todos = useQuery(trpc.todo.getAll.queryOptions());\n    const createMutation = useMutation(\n      trpc.todo.create.mutationOptions({\n        onSuccess: () => {\n          todos.refetch();\n          setNewTodoText("");\n        },\n      }),\n    );\n    const toggleMutation = useMutation(\n      trpc.todo.toggle.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    const deleteMutation = useMutation(\n      trpc.todo.delete.mutationOptions({\n        onSuccess: () => { todos.refetch() },\n      }),\n    );\n    {{/if}}\n\n  const handleAddTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newTodoText.trim()) {\n      createMutation.mutate({ text: newTodoText });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    deleteMutation.mutate({ id });\n  };\n  {{/if}}\n\n  return (\n    <div className="mx-auto w-full max-w-md py-10">\n      <Card>\n        <CardHeader>\n          <CardTitle>Todo List</CardTitle>\n          <CardDescription>Manage your tasks efficiently</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form\n            onSubmit={handleAddTodo}\n            className="mb-6 flex items-center space-x-2"\n          >\n            <Input\n              value={newTodoText}\n              onChange={(e) => setNewTodoText(e.target.value)}\n              placeholder="Add a new task..."\n              {{#if (eq backend "convex")}}\n              {{else}}\n              disabled={createMutation.isPending}\n              {{/if}}\n            />\n            <Button\n              type="submit"\n              {{#if (eq backend "convex")}}\n              disabled={!newTodoText.trim()}\n              {{else}}\n              disabled={createMutation.isPending || !newTodoText.trim()}\n              {{/if}}\n            >\n              {{#if (eq backend "convex")}}\n              Add\n              {{else}}\n                {createMutation.isPending ? (\n                  <Loader2 className="h-4 w-4 animate-spin" />\n                ) : (\n                  "Add"\n                )}\n              {{/if}}\n            </Button>\n          </form>\n\n          {{#if (eq backend "convex")}}\n            {todos === undefined ? (\n              <div className="flex justify-center py-4">\n                <Loader2 className="h-6 w-6 animate-spin" />\n              </div>\n            ) : todos.length === 0 ? (\n              <p className="py-4 text-center">No todos yet. Add one above!</p>\n            ) : (\n              <ul className="space-y-2">\n                {todos.map((todo) => (\n                  <li\n                    key={todo._id}\n                    className="flex items-center justify-between rounded-md border p-2"\n                  >\n                    <div className="flex items-center space-x-2">\n                      <Checkbox\n                        checked={todo.completed}\n                        onCheckedChange={() =>\n                          handleToggleTodo(todo._id, todo.completed)\n                        }\n                        id={\`todo-\${todo._id}\`}\n                      />\n                      <label\n                        htmlFor={\`todo-\${todo._id}\`}\n                        className={\`\${todo.completed ? "line-through text-muted-foreground" : ""}\`}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <Button\n                      variant="ghost"\n                      size="icon"\n                      onClick={() => handleDeleteTodo(todo._id)}\n                      aria-label="Delete todo"\n                    >\n                      <Trash2 className="h-4 w-4" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          {{else}}\n            {todos.isLoading ? (\n              <div className="flex justify-center py-4">\n                <Loader2 className="h-6 w-6 animate-spin" />\n              </div>\n            ) : todos.data?.length === 0 ? (\n              <p className="py-4 text-center">\n                No todos yet. Add one above!\n              </p>\n            ) : (\n              <ul className="space-y-2">\n                {todos.data?.map((todo) => (\n                  <li\n                    key={todo.id}\n                    className="flex items-center justify-between rounded-md border p-2"\n                  >\n                    <div className="flex items-center space-x-2">\n                      <Checkbox\n                        checked={todo.completed}\n                        onCheckedChange={() =>\n                          handleToggleTodo(todo.id, todo.completed)\n                        }\n                        id={\`todo-\${todo.id}\`}\n                      />\n                      <label\n                        htmlFor={\`todo-\${todo.id}\`}\n                        className={\`\${todo.completed ? "line-through" : ""}\`}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <Button\n                      variant="ghost"\n                      size="icon"\n                      onClick={() => handleDeleteTodo(todo.id)}\n                      aria-label="Delete todo"\n                    >\n                      <Trash2 className="h-4 w-4" />\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          {{/if}}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/todo/web/react/tanstack-start/src/routes/todos.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "7283124458",
        },
        content: `import { Button } from "@/components/ui/button";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from "@/components/ui/card";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport { Input } from "@/components/ui/input";\nimport { createFileRoute } from "@tanstack/react-router";\nimport { Loader2, Trash2 } from "lucide-react";\nimport { useState } from "react";\n\n{{#if (eq backend "convex")}}\nimport { useSuspenseQuery } from "@tanstack/react-query";\nimport { convexQuery } from "@convex-dev/react-query";\nimport { useMutation } from "convex/react";\nimport { api } from "@{{projectName}}/backend/convex/_generated/api";\nimport type { Id } from "@{{projectName}}/backend/convex/_generated/dataModel";\n{{else}}\n{{#if (eq api "trpc")}}\nimport { useTRPC } from "@/utils/trpc";\n{{/if}}\n{{#if (eq api "orpc")}}\nimport { orpc } from "@/utils/orpc";\n{{/if}}\nimport { useMutation, useQuery } from "@tanstack/react-query";\n{{/if}}\n\nexport const Route = createFileRoute("/todos")({\n  component: TodosRoute,\n});\n\nfunction TodosRoute() {\n  const [newTodoText, setNewTodoText] = useState("");\n\n  {{#if (eq backend "convex")}}\n  const todosQuery = useSuspenseQuery(convexQuery(api.todos.getAll, {}));\n  const todos = todosQuery.data;\n\n  const createTodo = useMutation(api.todos.create);\n  const toggleTodo = useMutation(api.todos.toggle);\n  const removeTodo = useMutation(api.todos.deleteTodo);\n\n  const handleAddTodo = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const text = newTodoText.trim();\n    if (text) {\n      setNewTodoText("");\n      try {\n        await createTodo({ text });\n      } catch (error) {\n        console.error("Failed to add todo:", error);\n        setNewTodoText(text);\n      }\n    }\n  };\n\n  const handleToggleTodo = async (id: Id<"todos">, completed: boolean) => {\n    try {\n      await toggleTodo({ id, completed: !completed });\n    } catch (error) {\n      console.error("Failed to toggle todo:", error);\n    }\n  };\n\n  const handleDeleteTodo = async (id: Id<"todos">) => {\n    try {\n      await removeTodo({ id });\n    } catch (error) {\n      console.error("Failed to delete todo:", error);\n    }\n  };\n  {{else}}\n    {{#if (eq api "trpc")}}\n  const trpc = useTRPC();\n    {{/if}}\n    {{#if (eq api "orpc")}}\n    {{/if}}\n\n    {{#if (eq api "trpc")}}\n  const todos = useQuery(trpc.todo.getAll.queryOptions());\n  const createMutation = useMutation(\n    trpc.todo.create.mutationOptions({\n      onSuccess: () => {\n        todos.refetch();\n        setNewTodoText("");\n      },\n    }),\n  );\n  const toggleMutation = useMutation(\n    trpc.todo.toggle.mutationOptions({\n      onSuccess: () => { todos.refetch() },\n    }),\n  );\n  const deleteMutation = useMutation(\n    trpc.todo.delete.mutationOptions({\n      onSuccess: () => { todos.refetch() },\n    }),\n  );\n    {{/if}}\n    {{#if (eq api "orpc")}}\n  const todos = useQuery(orpc.todo.getAll.queryOptions());\n  const createMutation = useMutation(\n    orpc.todo.create.mutationOptions({\n      onSuccess: () => {\n        todos.refetch();\n        setNewTodoText("");\n      },\n    }),\n  );\n  const toggleMutation = useMutation(\n    orpc.todo.toggle.mutationOptions({\n      onSuccess: () => { todos.refetch() },\n    }),\n  );\n  const deleteMutation = useMutation(\n    orpc.todo.delete.mutationOptions({\n      onSuccess: () => { todos.refetch() },\n    }),\n  );\n    {{/if}}\n\n  const handleAddTodo = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newTodoText.trim()) {\n      createMutation.mutate({ text: newTodoText });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    deleteMutation.mutate({ id });\n  };\n  {{/if}}\n\n  return (\n    <div className="mx-auto w-full max-w-md py-10">\n      <Card>\n        <CardHeader>\n          <CardTitle>Todo List{{#if (eq backend "convex")}} (Convex){{/if}}</CardTitle>\n          <CardDescription>Manage your tasks efficiently</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form\n            onSubmit={handleAddTodo}\n            className="mb-6 flex items-center space-x-2"\n          >\n            <Input\n              value={newTodoText}\n              onChange={(e) => setNewTodoText(e.target.value)}\n              placeholder="Add a new task..."\n              {{#unless (eq backend "convex")}}\n              disabled={createMutation.isPending}\n              {{/unless}}\n            />\n            <Button\n              type="submit"\n              {{#unless (eq backend "convex")}}\n              disabled={createMutation.isPending || !newTodoText.trim()}\n              {{else}}\n              disabled={!newTodoText.trim()}\n              {{/unless}}\n            >\n              {{#unless (eq backend "convex")}}\n              {createMutation.isPending ? (\n                <Loader2 className="h-4 w-4 animate-spin" />\n              ) : (\n                "Add"\n              )}\n              {{else}}\n              Add\n              {{/unless}}\n            </Button>\n          </form>\n\n          {{#if (eq backend "convex")}}\n          {todos?.length === 0 ? (\n            <p className="py-4 text-center">No todos yet. Add one above!</p>\n          ) : (\n            <ul className="space-y-2">\n              {todos?.map((todo) => (\n                <li\n                  key={todo._id}\n                  className="flex items-center justify-between rounded-md border p-2"\n                >\n                  <div className="flex items-center space-x-2">\n                    <Checkbox\n                      checked={todo.completed}\n                      onCheckedChange={() =>\n                        handleToggleTodo(todo._id, todo.completed)\n                      }\n                      id={\`todo-\${todo._id}\`}\n                    />\n                    <label\n                      htmlFor={\`todo-\${todo._id}\`}\n                      className={\`\${\n                        todo.completed\n                          ? "text-muted-foreground line-through"\n                          : ""\n                      }\`}\n                    >\n                      {todo.text}\n                    </label>\n                  </div>\n                  <Button\n                    variant="ghost"\n                    size="icon"\n                    onClick={() => handleDeleteTodo(todo._id)}\n                    aria-label="Delete todo"\n                  >\n                    <Trash2 className="h-4 w-4" />\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          )}\n          {{else}}\n          {todos.isLoading ? (\n            <div className="flex justify-center py-4">\n              <Loader2 className="h-6 w-6 animate-spin" />\n            </div>\n          ) : todos.data?.length === 0 ? (\n            <p className="py-4 text-center">No todos yet. Add one above!</p>\n          ) : (\n            <ul className="space-y-2">\n              {todos.data?.map((todo) => (\n                <li\n                  key={todo.id}\n                  className="flex items-center justify-between rounded-md border p-2"\n                >\n                  <div className="flex items-center space-x-2">\n                    <Checkbox\n                      checked={todo.completed}\n                      onCheckedChange={() =>\n                        handleToggleTodo(todo.id, todo.completed)\n                      }\n                      id={\`todo-\${todo.id}\`}\n                    />\n                    <label\n                      htmlFor={\`todo-\${todo.id}\`}\n                      className={\`\${todo.completed ? "line-through" : ""}\`}\n                    >\n                      {todo.text}\n                    </label>\n                  </div>\n                  <Button\n                    variant="ghost"\n                    size="icon"\n                    onClick={() => handleDeleteTodo(todo.id)}\n                    aria-label="Delete todo"\n                  >\n                    <Trash2 className="h-4 w-4" />\n                  </Button>\n                </li>\n              ))}\n            </ul>\n          )}\n          {{/if}}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/todo/web/solid/src/routes/todos.tsx.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "fdf2b26d48",
        },
        content: `import { createFileRoute } from "@tanstack/solid-router";\nimport { Loader2, Trash2 } from "lucide-solid";\nimport { createSignal, For, Show } from "solid-js";\nimport { orpc } from "@/utils/orpc";\nimport { useQuery, useMutation } from "@tanstack/solid-query";\n\nexport const Route = createFileRoute("/todos")({\n  component: TodosRoute,\n});\n\nfunction TodosRoute() {\n  const [newTodoText, setNewTodoText] = createSignal("");\n\n  const todos = useQuery(() => orpc.todo.getAll.queryOptions());\n\n  const createMutation = useMutation(() =>\n    orpc.todo.create.mutationOptions({\n      onSuccess: () => {\n        todos.refetch();\n        setNewTodoText("");\n      },\n    }),\n  );\n\n  const toggleMutation = useMutation(() =>\n    orpc.todo.toggle.mutationOptions({\n      onSuccess: () => { todos.refetch() },\n    }),\n  );\n\n  const deleteMutation = useMutation(() =>\n    orpc.todo.delete.mutationOptions({\n      onSuccess: () => { todos.refetch() },\n    }),\n  );\n\n  const handleAddTodo = (e: Event) => {\n    e.preventDefault();\n    if (newTodoText().trim()) {\n      createMutation.mutate({ text: newTodoText() });\n    }\n  };\n\n  const handleToggleTodo = (id: number, completed: boolean) => {\n    toggleMutation.mutate({ id, completed: !completed });\n  };\n\n  const handleDeleteTodo = (id: number) => {\n    deleteMutation.mutate({ id });\n  };\n\n  return (\n    <div class="mx-auto w-full max-w-md py-10">\n      <div class="rounded-lg border p-6 shadow-sm">\n        <div class="mb-4">\n          <h2 class="text-xl font-semibold">Todo List</h2>\n          <p class="text-sm">Manage your tasks efficiently</p>\n        </div>\n        <div>\n          <form\n            onSubmit={handleAddTodo}\n            class="mb-6 flex items-center space-x-2"\n          >\n            <input\n              type="text"\n              value={newTodoText()}\n              onInput={(e) => setNewTodoText(e.currentTarget.value)}\n              placeholder="Add a new task..."\n              disabled={createMutation.isPending}\n              class="w-full rounded-md border p-2 text-sm"\n            />\n            <button\n              type="submit"\n              disabled={createMutation.isPending || !newTodoText().trim()}\n              class="rounded-md bg-blue-600 px-4 py-2 text-sm text-white disabled:opacity-50"\n            >\n              <Show when={createMutation.isPending} fallback="Add">\n                <Loader2 class="h-4 w-4 animate-spin" />\n              </Show>\n            </button>\n          </form>\n\n          <Show when={todos.isLoading}>\n            <div class="flex justify-center py-4">\n              <Loader2 class="h-6 w-6 animate-spin" />\n            </div>\n          </Show>\n\n          <Show when={!todos.isLoading && todos.data?.length === 0}>\n            <p class="py-4 text-center">No todos yet. Add one above!</p>\n          </Show>\n\n          <Show when={!todos.isLoading}>\n            <ul class="space-y-2">\n              <For each={todos.data}>\n                {(todo) => (\n                  <li class="flex items-center justify-between rounded-md border p-2">\n                    <div class="flex items-center space-x-2">\n                      <input\n                        type="checkbox"\n                        checked={todo.completed}\n                        onChange={() =>\n                          handleToggleTodo(todo.id, todo.completed)\n                        }\n                        id={\`todo-\${todo.id}\`}\n                        class="h-4 w-4"\n                      />\n                      <label\n                        for={\`todo-\${todo.id}\`}\n                        class={todo.completed ? "line-through" : ""}\n                      >\n                        {todo.text}\n                      </label>\n                    </div>\n                    <button\n                      type="button"\n                      onClick={() => handleDeleteTodo(todo.id)}\n                      aria-label="Delete todo"\n                      class="ml-2 rounded-md p-1"\n                    >\n                      <Trash2 class="h-4 w-4" />\n                    </button>\n                  </li>\n                )}\n              </For>\n            </ul>\n          </Show>\n        </div>\n      </div>\n    </div>\n  );\n}\n`,
        type: "text",
      },
      "examples/todo/web/svelte/src/routes/todos/+page.svelte.hbs": {
        metadata: {
          updatedAt: "2025-06-17T06:06:35.000Z",
          updatedHash: "782c16fd68",
        },
        content: `{{#if (eq backend "convex")}}\n<script lang="ts">\n	import { useQuery, useConvexClient } from 'convex-svelte';\n	import { api } from '@{{projectName}}/backend/convex/_generated/api';\n	import type { Id } from '@{{projectName}}/backend/convex/_generated/dataModel';\n\n	let newTodoText = $state('');\n	let isAdding = $state(false);\n	let addError = $state<Error | null>(null);\n	let togglingId = $state<Id<'todos'> | null>(null);\n	let toggleError = $state<Error | null>(null);\n	let deletingId = $state<Id<'todos'> | null>(null);\n	let deleteError = $state<Error | null>(null);\n\n	const client = useConvexClient();\n\n	const todosQuery = useQuery(api.todos.getAll, {});\n\n	async function handleAddTodo(event: SubmitEvent) {\n		event.preventDefault();\n		const text = newTodoText.trim();\n		if (!text || isAdding) return;\n\n		isAdding = true;\n		addError = null;\n		try {\n			await client.mutation(api.todos.create, { text });\n			newTodoText = '';\n		} catch (err) {\n			console.error('Failed to add todo:', err);\n			addError = err instanceof Error ? err : new Error(String(err));\n		} finally {\n			isAdding = false;\n		}\n	}\n\n	async function handleToggleTodo(id: Id<'todos'>, completed: boolean) {\n		if (togglingId === id || deletingId === id) return;\n\n		togglingId = id;\n		toggleError = null;\n		try {\n			await client.mutation(api.todos.toggle, { id, completed: !completed });\n		} catch (err) {\n			console.error('Failed to toggle todo:', err);\n			toggleError = err instanceof Error ? err : new Error(String(err));\n		} finally {\n			if (togglingId === id) {\n				togglingId = null;\n			}\n		}\n	}\n\n	async function handleDeleteTodo(id: Id<'todos'>) {\n		if (togglingId === id || deletingId === id) return;\n\n		deletingId = id;\n		deleteError = null;\n		try {\n			await client.mutation(api.todos.deleteTodo, { id });\n		} catch (err) {\n			console.error('Failed to delete todo:', err);\n			deleteError = err instanceof Error ? err : new Error(String(err));\n		} finally {\n			if (deletingId === id) {\n				deletingId = null;\n			}\n		}\n	}\n\n	const canAdd = $derived(!isAdding && newTodoText.trim().length > 0);\n	const isLoadingTodos = $derived(todosQuery.isLoading);\n	const todos = $derived(todosQuery.data ?? []);\n	const hasTodos = $derived(todos.length > 0);\n\n</script>\n\n<div class="p-4">\n	<h1 class="text-xl mb-4">Todos (Convex)</h1>\n\n	<form onsubmit={handleAddTodo} class="flex gap-2 mb-4">\n		<input\n			type="text"\n			bind:value={newTodoText}\n			placeholder="New task..."\n			disabled={isAdding}\n			class="p-1 flex-grow"\n		/>\n		<button\n			type="submit"\n			disabled={!canAdd}\n			class="bg-blue-500 text-white px-3 py-1 rounded disabled:opacity-50"\n		>\n			{#if isAdding}Adding...{:else}Add{/if}\n		</button>\n	</form>\n\n	{#if isLoadingTodos}\n		<p>Loading...</p>\n	{:else if !hasTodos}\n		<p>No todos yet.</p>\n	{:else}\n		<ul class="space-y-1">\n			{#each todos as todo (todo._id)}\n				{@const isTogglingThis = togglingId === todo._id}\n				{@const isDeletingThis = deletingId === todo._id}\n				{@const isDisabled = isTogglingThis || isDeletingThis}\n				<li\n					class="flex items-center justify-between p-2"\n					class:opacity-50={isDisabled}\n				>\n					<div class="flex items-center gap-2">\n						<input\n							type="checkbox"\n							id={\`todo-\${todo._id}\`}\n							checked={todo.completed}\n							onchange={() => handleToggleTodo(todo._id, todo.completed)}\n							disabled={isDisabled}\n						/>\n						<label\n							for={\`todo-\${todo._id}\`}\n							class:line-through={todo.completed}\n						>\n							{todo.text}\n						</label>\n					</div>\n					<button\n						type="button"\n						onclick={() => handleDeleteTodo(todo._id)}\n						disabled={isDisabled}\n						aria-label="Delete todo"\n						class="text-red-500 px-1 disabled:opacity-50"\n					>\n						{#if isDeletingThis}Deleting...{:else}X{/if}\n					</button>\n				</li>\n			{/each}\n		</ul>\n	{/if}\n\n	{#if todosQuery.error}\n		<p class="mt-4 text-red-500">\n			Error loading: {todosQuery.error?.message ?? 'Unknown error'}\n		</p>\n	{/if}\n	{#if addError}\n		<p class="mt-4 text-red-500">\n			Error adding: {addError.message ?? 'Unknown error'}\n		</p>\n	{/if}\n	{#if toggleError}\n		<p class="mt-4 text-red-500">\n			Error updating: {toggleError.message ?? 'Unknown error'}\n		</p>\n	{/if}\n	{#if deleteError}\n		<p class="mt-4 text-red-500">\n			Error deleting: {deleteError.message ?? 'Unknown error'}\n		</p>\n	{/if}\n</div>\n{{else}}\n<script lang="ts">\n	{{#if (eq api "orpc")}}\n	import { orpc } from '$lib/orpc';\n	{{/if}}\n	import { createQuery, createMutation } from '@tanstack/svelte-query';\n\n	let newTodoText = $state('');\n\n	{{#if (eq api "orpc")}}\n	const todosQuery = createQuery(orpc.todo.getAll.queryOptions());\n\n	const addMutation = createMutation(\n		orpc.todo.create.mutationOptions({\n			onSuccess: () => {\n				$todosQuery.refetch();\n				newTodoText = '';\n			},\n			onError: (error) => {\n				console.error('Failed to create todo:', error?.message ?? error);\n			},\n		})\n	);\n\n	const toggleMutation = createMutation(\n		orpc.todo.toggle.mutationOptions({\n			onSuccess: () => {\n				$todosQuery.refetch();\n			},\n			onError: (error) => {\n				console.error('Failed to toggle todo:', error?.message ?? error);\n			},\n		})\n	);\n\n	const deleteMutation = createMutation(\n		orpc.todo.delete.mutationOptions({\n			onSuccess: () => {\n				$todosQuery.refetch();\n			},\n			onError: (error) => {\n				console.error('Failed to delete todo:', error?.message ?? error);\n			},\n		})\n	);\n	{{/if}}\n\n	function handleAddTodo(event: SubmitEvent) {\n		event.preventDefault();\n		const text = newTodoText.trim();\n		if (text) {\n			$addMutation.mutate({ text });\n		}\n	}\n\n	function handleToggleTodo(id: number, completed: boolean) {\n		$toggleMutation.mutate({ id, completed: !completed });\n	}\n\n	function handleDeleteTodo(id: number) {\n		$deleteMutation.mutate({ id });\n	}\n\n	const isAdding = $derived($addMutation.isPending);\n	const canAdd = $derived(!isAdding && newTodoText.trim().length > 0);\n	const isLoadingTodos = $derived($todosQuery.isLoading);\n	const todos = $derived($todosQuery.data ?? []);\n	const hasTodos = $derived(todos.length > 0);\n\n</script>\n\n<div class="p-4">\n	<h1 class="text-xl mb-4">Todos{{#if (eq api "orpc")}} (oRPC){{/if}}</h1>\n\n	<form onsubmit={handleAddTodo} class="flex gap-2 mb-4">\n		<input\n			type="text"\n			bind:value={newTodoText}\n			placeholder="New task..."\n			disabled={isAdding}\n			class=" p-1 flex-grow"\n		/>\n		<button\n			type="submit"\n			disabled={!canAdd}\n			class="bg-blue-500 text-white px-3 py-1 rounded disabled:opacity-50"\n		>\n			{#if isAdding}Adding...{:else}Add{/if}\n		</button>\n	</form>\n\n	{#if isLoadingTodos}\n		<p>Loading...</p>\n	{:else if !hasTodos}\n		<p>No todos yet.</p>\n	{:else}\n		<ul class="space-y-1">\n			{#each todos as todo (todo.id)}\n				{@const isToggling = $toggleMutation.isPending && $toggleMutation.variables?.id === todo.id}\n				{@const isDeleting = $deleteMutation.isPending && $deleteMutation.variables?.id === todo.id}\n				{@const isDisabled = isToggling || isDeleting}\n				<li\n					class="flex items-center justify-between p-2 "\n					class:opacity-50={isDisabled}\n				>\n					<div class="flex items-center gap-2">\n						<input\n							type="checkbox"\n							id={\`todo-\${todo.id}\`}\n							checked={todo.completed}\n							onchange={() => handleToggleTodo(todo.id, todo.completed)}\n							disabled={isDisabled}\n						/>\n						<label\n							for={\`todo-\${todo.id}\`}\n							class:line-through={todo.completed}\n						>\n							{todo.text}\n						</label>\n					</div>\n					<button\n						type="button"\n						onclick={() => handleDeleteTodo(todo.id)}\n						disabled={isDisabled}\n						aria-label="Delete todo"\n						class="text-red-500 px-1 disabled:opacity-50"\n					>\n						{#if isDeleting}Deleting...{:else}X{/if}\n					</button>\n				</li>\n			{/each}\n		</ul>\n	{/if}\n\n	{#if $todosQuery.isError}\n		<p class="mt-4 text-red-500">\n			Error loading: {$todosQuery.error?.message ?? 'Unknown error'}\n		</p>\n	{/if}\n	{#if $addMutation.isError}\n		<p class="mt-4 text-red-500">\n			Error adding: {$addMutation.error?.message ?? 'Unknown error'}\n		</p>\n	{/if}\n	{#if $toggleMutation.isError}\n		<p class="mt-4 text-red-500">\n			Error updating: {$toggleMutation.error?.message ?? 'Unknown error'}\n		</p>\n	{/if}\n	{#if $deleteMutation.isError}\n		<p class="mt-4 text-red-500">\n			Error deleting: {$deleteMutation.error?.message ?? 'Unknown error'}\n		</p>\n	{/if}\n</div>\n{{/if}}\n`,
        type: "text",
      },
    },
  },
};
