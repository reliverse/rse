/* ------------------------------------------------------------------
 * Default Config and Merging Logic
 * ------------------------------------------------------------------
 */

import { isBunPM, runtimeInfo } from "@reliverse/runtime";

import type { ProjectFramework, RseConfig } from "./cfg-types";

import { DEFAULT_DOMAIN, RSE_SCHEMA_URL, UNKNOWN_VALUE } from "./cfg-consts";

export const DEFAULT_CONFIG_RSE: RseConfig = {
  $schema: RSE_SCHEMA_URL,
  projectName: UNKNOWN_VALUE,
  projectAuthor: UNKNOWN_VALUE,
  projectDescription: UNKNOWN_VALUE,
  version: "0.1.0",
  projectLicense: "MIT",
  projectState: "creating",
  projectRepository: DEFAULT_DOMAIN,
  projectDomain: DEFAULT_DOMAIN,
  projectCategory: UNKNOWN_VALUE,
  projectSubcategory: UNKNOWN_VALUE,
  projectTemplate: UNKNOWN_VALUE,
  projectTemplateDate: UNKNOWN_VALUE,
  projectArchitecture: UNKNOWN_VALUE,
  repoPrivacy: UNKNOWN_VALUE,
  projectGitService: "github",
  projectDeployService: "vercel",
  repoBranch: "main",
  projectFramework: "nextjs",
  projectPackageManager: (await isBunPM()) ? "bun" : "npm",
  projectRuntime: (["node", "deno", "bun"].includes(runtimeInfo?.name ?? "")
    ? runtimeInfo?.name
    : "node") as "node" | "deno" | "bun",
  preferredLibraries: {
    stateManagement: UNKNOWN_VALUE,
    formManagement: UNKNOWN_VALUE,
    styling: UNKNOWN_VALUE,
    uiComponents: UNKNOWN_VALUE,
    testing: UNKNOWN_VALUE,
    authentication: UNKNOWN_VALUE,
    databaseLibrary: UNKNOWN_VALUE,
    databaseProvider: UNKNOWN_VALUE,
    api: UNKNOWN_VALUE,
    linting: UNKNOWN_VALUE,
    formatting: UNKNOWN_VALUE,
    payment: UNKNOWN_VALUE,
    analytics: UNKNOWN_VALUE,
    monitoring: UNKNOWN_VALUE,
    logging: UNKNOWN_VALUE,
    forms: UNKNOWN_VALUE,
    notifications: UNKNOWN_VALUE,
    search: UNKNOWN_VALUE,
    uploads: UNKNOWN_VALUE,
    validation: UNKNOWN_VALUE,
    documentation: UNKNOWN_VALUE,
    icons: UNKNOWN_VALUE,
    mail: UNKNOWN_VALUE,
    cache: UNKNOWN_VALUE,
    storage: UNKNOWN_VALUE,
    cdn: UNKNOWN_VALUE,
    cms: UNKNOWN_VALUE,
    i18n: UNKNOWN_VALUE,
    seo: UNKNOWN_VALUE,
    motion: UNKNOWN_VALUE,
    charts: UNKNOWN_VALUE,
    dates: UNKNOWN_VALUE,
    markdown: UNKNOWN_VALUE,
    security: UNKNOWN_VALUE,
    routing: UNKNOWN_VALUE,
  },
  monorepo: {
    type: "none",
    packages: [],
    sharedPackages: [],
  },
  ignoreDependencies: [],
  customRules: {},
  features: {
    i18n: false,
    analytics: false,
    themeMode: "dark-light",
    authentication: true,
    api: true,
    database: true,
    testing: false,
    docker: false,
    ci: false,
    commands: [],
    webview: [],
    language: [],
    themes: [],
  },
  codeStyle: {
    dontRemoveComments: true,
    shouldAddComments: true,
    typeOrInterface: "type",
    importOrRequire: "import",
    quoteMark: "double",
    semicolons: true,
    lineWidth: 80,
    indentStyle: "space",
    indentSize: 2,
    importSymbol: "~",
    trailingComma: "all",
    bracketSpacing: true,
    arrowParens: "always",
    tabWidth: 2,
    jsToTs: false,
    cjsToEsm: false,
    modernize: {
      replaceFs: false,
      replacePath: false,
      replaceHttp: false,
      replaceProcess: false,
      replaceConsole: false,
      replaceEvents: false,
    },
  },
  multipleRepoCloneMode: false,
  customUserFocusedRepos: [],
  customDevsFocusedRepos: [],
  hideRepoSuggestions: false,
  customReposOnNewProject: false,
  envComposerOpenBrowser: true,
  skipPromptsUseAutoBehavior: false,
  deployBehavior: "prompt",
  depsBehavior: "prompt",
  gitBehavior: "prompt",
  i18nBehavior: "prompt",
  scriptsBehavior: "prompt",
  existingRepoBehavior: "prompt",
  relinterConfirm: "promptOnce",
};

export const PROJECT_FRAMEWORK_FILES: Record<ProjectFramework, string[]> = {
  unknown: [],
  nextjs: ["next.config.js", "next.config.ts", "next.config.mjs"],
  vite: ["vite.config.js", "vite.config.ts", "react.config.js"],
  svelte: ["svelte.config.js", "svelte.config.ts"],
  remix: ["remix.config.js", "remix.config.ts"],
  astro: ["astro.config.js", "astro.config.ts", "astro.config.mjs"],
  nuxt: ["nuxt.config.js", "nuxt.config.ts"],
  solid: ["solid.config.js", "solid.config.ts"],
  qwik: ["qwik.config.js", "qwik.config.ts"],
  "react-native": ["App.js", "App.tsx", "App.ts"],
  expo: ["app.json", "app.config.js"],
  capacitor: ["capacitor.config.ts", "capacitor.config.json"],
  ionic: ["ionic.config.json"],
  electron: ["electron.config.js", "electron.config.ts"],
  tauri: ["tauri.conf.json"],
  neutralino: ["neutralino.config.json"],
  rempts: ["package.json:@reliverse/rempts"],
  citty: ["package.json:citty"],
  commander: ["package.json:commander"],
  cac: ["package.json:cac"],
  meow: ["package.json:meow"],
  yargs: ["package.json:yargs"],
  vscode: ["vscode.config.js", "vscode.config.ts"],
  webextension: ["manifest.json"],
  "browser-extension": ["manifest.json"],
  "npm-jsr": ["jsr.json", "jsr.jsonc"],
  lynx: ["App.tsx", "App.css"],
  vue: ["vue.config.js", "vite.config.ts"],
  wxt: ["wxt.config.js", "wxt.config.ts"],
};
